<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用sftp搭建本地快速部署环境]]></title>
      <url>http://tecknight.xyz/2017/09/10/%E4%BD%BF%E7%94%A8sftp%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>首先，我们要确保<code>sshd</code>也就是我们的ssh服务处于运行状态之中，下面以centos为例来讲解搭建的过程。</p>
<p>必要的包: <code>openssh-clients</code> <code>openssh-server</code></p>
<p>运行下面的命令以确定我们的ssh服务处于active的状态中</p>
<pre><code>$ systemctl status sshd
</code></pre><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>新建一个用户(非root用户请加sudo)</p>
<pre><code>$ adduser test
</code></pre><pre><code>$ passwd test
</code></pre><p>设置密码，更新用户令牌信息，本地生成SSH密钥并将公钥放置于服务器，确保能从本地使用SSH登录远程主机</p>
<p>明确新用户的文件夹权限</p>
<pre><code>$ chown root:root /../somepath/sftp
$ chmod 755 /../somepath/sftp
</code></pre><p>在sftp文件夹下创建<code>uploads</code>文件夹，所有上传的文件都会在里面，将拥有者设置为test用户</p>
<pre><code>$ chown test:test /../somepath/sftp/uploads
</code></pre><p>将<code>PasswordAuthentication</code>设置为<code>no</code>并保存，确保不能用密码建立SSH连接并重启SSH服务</p>
<pre><code>$ vi /etc/ssh/sshd_config
$ ...
$ systemctl restart sshd
</code></pre><p>现在在本地尝试使用<code>sftp</code>进行登录</p>
<pre><code>sftp -i ~/.ssh/key test@ip_address
</code></pre><p>发现进入sftp即成功！</p>
<h3 id="使用vscode配置快速部署环境"><a href="#使用vscode配置快速部署环境" class="headerlink" title="使用vscode配置快速部署环境"></a>使用vscode配置快速部署环境</h3><p>这里是用的是 <code>ftp-sync</code> 插件</p>
<p>安装完成之后按<code>F1</code>键</p>
<p>选择<code>Ftp-sync: init</code></p>
<p>就可以在<code>.vscode</code>文件夹下找到<code>ftp-sync.json</code>文件</p>
<pre><code>{
    &quot;remotePath&quot;: &quot;/../sftp/uploads/project&quot;,
    &quot;host&quot;: &quot;&quot;,    // ip地址
    &quot;username&quot;: &quot;test&quot;,
    &quot;password&quot;: null,    // 留空，因为使用了更安全的sftp协议传输文件
    &quot;port&quot;: 22,    // SSH端口
    &quot;secure&quot;: true,
    &quot;protocol&quot;: &quot;sftp&quot;,
    &quot;uploadOnSave&quot;: false,
    &quot;passive&quot;: false,
    &quot;debug&quot;: false,
    &quot;privateKeyPath&quot;: &quot;/Users/user/.ssh/key&quot;,  // 本地密钥的地址
    &quot;passphrase&quot;: null,
    &quot;ignore&quot;: [
        &quot;\\.vscode&quot;,
        &quot;\\.git&quot;,
        &quot;\\.DS_Store&quot;,
        &quot;\\node_modules&quot;,
        &quot;\\test&quot;,
        &quot;\\.travis.yml&quot;        // 想要忽略上传的文件夹或文件
    ],
    &quot;generatedFiles&quot;: {
        &quot;uploadOnSave&quot;: false,
        &quot;extensionsToInclude&quot;: [],
        &quot;path&quot;: &quot;&quot;
    }
}
</code></pre><p>然后愉快地快速部署到服务器吧</p>
<figcaption></p></figcaption><pre class=" language-F1</code>"><code class="language-F1</code>"><p>选择 <code>Ftp-sync: Local To Remote</code></pre>
<p>选择 <code>full-sync</code>，执行上传。大功告成！</p>
<p>注： 如果是node项目的话可以使用<code>pm2</code>检测文件更改自动重启服务，一键更新线上代码！</p>
<p>参考：</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-enable-sftp-without-shell-access-on-centos-7" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-enable-sftp-without-shell-access-on-centos-7</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> web </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centOS下的node部署环境搭建]]></title>
      <url>http://tecknight.xyz/2017/06/08/centOS%E4%B8%8B%E7%9A%84node%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="本文实践的是单机搭建-nginx-node-mongodb-redis-流行组合的具体过程"><a href="#本文实践的是单机搭建-nginx-node-mongodb-redis-流行组合的具体过程" class="headerlink" title="本文实践的是单机搭建 nginx+node+mongodb+redis 流行组合的具体过程"></a>本文实践的是单机搭建 nginx+node+mongodb+redis 流行组合的具体过程</h2><p><a href="https://jp.godaddy.com/help/set-up-nodejs-application-for-production-centos-17354" target="_blank" rel="external">node的安装过程详情</a></p>
<p>其他的直接上亲自实践过的安装命令以及需要注意的地方，习惯用英文注释，部分重点已用中文指出</p>
<pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment" spellcheck="true">#update software</span>
<span class="token function">sudo</span> yum update -y
<span class="token comment" spellcheck="true">#back to root dir</span>
<span class="token function">cd</span> ~
<span class="token comment" spellcheck="true">#Nginx</span>
<span class="token function">sudo</span> yum -y <span class="token function">install</span> <span class="token function">make</span> zlib zlib-devel gcc-c++ libtool  openssl openssl-devel
<span class="token comment" spellcheck="true">#If pcre</span>
rpm -qa pcre
<span class="token comment" spellcheck="true">#yes download nginx stable version</span>
<span class="token function">wget</span> http://nginx.org/download/nginx-1.12.0.tar.gz
<span class="token function">tar</span> zxvf nginx-1.12.0.tar.gz
<span class="token comment" spellcheck="true">#switch to root for mkdir</span>
<span class="token function">su</span> root
<span class="token function">cd</span> nginx-1.12.0
./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token function">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token keyword">exit</span>
<span class="token function">rm</span> -rf nginx-1.12.0
<span class="token function">rm</span> nginx-1.12.0.tar.gz
<span class="token comment" spellcheck="true">#start nginx</span>
<span class="token comment" spellcheck="true">#access public IP should success</span>
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
<span class="token comment" spellcheck="true">#self-start config</span>
<span class="token function">sudo</span> <span class="token function">vi</span> /lib/systemd/system/nginx.service
<span class="token comment" spellcheck="true">#content</span>
<span class="token keyword">:</span><span class="token string">'
[Unit]
Description=nginx
After=network.target
[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s quit
PrivateTmp=true
[Install]
WantedBy=multi-user.target
'</span>
systemctl start nginx.service
systemctl <span class="token function">enable</span> nginx.service
<span class="token comment" spellcheck="true">#check if running</span>
systemctl list-units --type<span class="token operator">=</span>service

<span class="token comment" spellcheck="true">#Mongodb</span>
<span class="token function">sudo</span> <span class="token function">vi</span> /etc/yum.repos.d/mongodb-org-3.4.repo

<span class="token comment" spellcheck="true">#https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/</span>
<span class="token comment" spellcheck="true">#content</span>
<span class="token keyword">:</span><span class="token string">'
[mongodb-org-3.4]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/<span class="token variable">$releasever</span>/mongodb-org/3.4/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc
'</span>

<span class="token comment" spellcheck="true">#yum install mongodb</span>
<span class="token function">sudo</span> yum -y <span class="token function">install</span> mongodb-org
<span class="token comment" spellcheck="true">#start mongodb(default it can self-start when booting)</span>
<span class="token function">sudo</span> <span class="token function">service</span> mongod start
<span class="token comment" spellcheck="true">#self-start</span>
<span class="token function">sudo</span> <span class="token function">chkconfig</span> mongod on

<span class="token comment" spellcheck="true">#pm2 install</span>
<span class="token function">sudo</span> cnpm i pm2 -g

<span class="token comment" spellcheck="true">#redis</span>
<span class="token function">wget</span> http://download.redis.io/releases/redis-3.2.9.tar.gz
<span class="token function">su</span> root
<span class="token function">tar</span> xzf redis-3.2.9.tar.gz
<span class="token function">cd</span> redis-3.2.9
<span class="token function">make</span>
<span class="token function">cd</span> src
<span class="token function">cp</span> redis-server redis-cli redis-sentinel redis-benchmark redis-check-aof redis-check-rdb /usr/local/bin
<span class="token function">mkdir</span> /etc/redis
<span class="token function">mkdir</span> -p /var/lib/redis/6379
<span class="token function">cp</span> redis.conf /etc/redis/6379.conf

<span class="token function">vi</span> /etc/redis/6379.conf
<span class="token keyword">:</span><span class="token string">'
daemonize yes
logfile /var/log/redis_6379.log
dir /var/lib/redis/6379
'</span>

<span class="token function">cp</span> utils/redis_init_script /etc/init.d/redis

<span class="token function">vi</span> /lib/systemd/system/redis.service
<span class="token comment" spellcheck="true">#content</span>
<span class="token keyword">:</span><span class="token string">'
[Unit]
Description=Redis on port 6379
[Service]
Type=forking
ExecStart=/etc/init.d/redis_6379 start
ExecStop=/etc/init.d/redis_6379 stop
[Install]
WantedBy=multi-user.target

vm.overcommit_memory = 1
net.core.somaxconn=512
'</span>
systemctl start redis.service
systemctl <span class="token function">enable</span> redis.service

<span class="token function">cd</span> <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf redis-3.2.9 redis-3.2.9.tar.gz

<span class="token comment" spellcheck="true">#kernel config</span>
sysctl -w vm.overcommit_memory<span class="token operator">=</span>1
sysctl -w net.core.somaxconn<span class="token operator">=</span>512
<span class="token keyword">echo</span> never <span class="token operator">></span> /sys/kernel/mm/transparent_hugepage/enabled

<span class="token comment" spellcheck="true">#booting shell</span>
<span class="token keyword">echo</span> never <span class="token operator">>></span> /sys/kernel/mm/transparent_hugepage/enabled
<span class="token keyword">echo</span> never <span class="token operator">>></span> /sys/kernel/mm/transparent_hugepage/defrag
systemctl restart mongod.service

<span class="token comment" spellcheck="true">#nginx conf ( Remember to configure user !!!)</span>
<span class="token comment" spellcheck="true">#nginx 配置内容经优化（踩过的坑，最顶部的注释要去掉替换成对应的用户名，否则会无文件权限！！）</span>
<span class="token comment" spellcheck="true">#其中含负载均衡及反向代理的配置，模仿着配置好就行</span>
<span class="token keyword">:</span><span class="token string">'
#user userName

http {
    client_header_buffer_size 3k;
    client_max_body_size 2m;
    client_body_buffer_size 7k;
    large_client_header_buffers 2 1k;

    client_body_timeout   32;
    client_header_timeout 32;
    reset_timedout_connection on;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;

    gzip on;
    gzip_disable "MSIE [1-6]\.";
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    types_hash_max_size 2048;

}

# 负载均衡
upstream pro_name {
    server 127.0.0.1:3000;
#   balanceServer ip2;
#   balanceServer ip3;
}

server {
    listen 80;
    server_name pro_name;
    charset utf-8;
    access_log /var/log/nginx/app.log;
    root /home/.../code/...;



    location ~ /api/ {
        proxy_pass http://pro_name;
        proxy_redirect off;
        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span>;
        proxy_set_header Host <span class="token variable">$http_host</span>;
        proxy_set_header X-NginX-Proxy true;
        proxy_http_version 1.1;
        proxy_read_timeout 7s;
    }

    location ~ /.ht {
        deny all;
    }

    location ~* \.(css|js|gif|jpe?g|png|ico)$ {
        root /home/.../code/...;
        expires 168h;
    }

    location / {
        index  index.html index.htm;
    }


}
'</span>

<span class="token comment" spellcheck="true">#实用nginx命令，养成好习惯</span>
<span class="token comment" spellcheck="true">#everytime save change of .conf</span>
/usr/local/nginx/sbin/nginx -t  <span class="token comment" spellcheck="true">#Check Syntax</span>
/usr/local/nginx/sbin/nginx -s reload <span class="token comment" spellcheck="true">#Smooth reload nginx</span>

<span class="token comment" spellcheck="true">#nginx optimize</span>
sysctl -w net.core.somaxconn<span class="token operator">=</span>1024
</code></pre>
<h3 id="最后使用pm2进行node项目的管理，包括简单的监控"><a href="#最后使用pm2进行node项目的管理，包括简单的监控" class="headerlink" title="最后使用pm2进行node项目的管理，包括简单的监控"></a>最后使用pm2进行node项目的管理，包括简单的监控</h3><p>详情请见</p>
<p><a href="http://pm2.keymetrics.io/" target="_blank" rel="external">pm2进程管理</a></p>
<p><a href="https://keymetrics.io/" target="_blank" rel="external">keymetrics监控项目</a></p>
<h3 id="附上腾讯云主机在生产环境下的安全组配置"><a href="#附上腾讯云主机在生产环境下的安全组配置" class="headerlink" title="附上腾讯云主机在生产环境下的安全组配置"></a>附上腾讯云主机在生产环境下的安全组配置</h3><img src="/2017/06/08/centOS下的node部署环境搭建/1.png" alt="1.png" title="">
<img src="/2017/06/08/centOS下的node部署环境搭建/2.png" alt="2.png" title="">]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> linux </tag>
            
            <tag> centOS </tag>
            
            <tag> deploy </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongoose下的promise技巧]]></title>
      <url>http://tecknight.xyz/2017/05/02/mongoose%E4%B8%8B%E7%9A%84promise%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在Promise大行其道的世界里，使用promise可谓是家常便饭了，写一个漂亮的promise极其重要</p>
<p>本文将会基于Express环境实战mongoose的promise，帮大家避免一些常见的错误并对promise链进行调整以提高其可读性</p>
<p>最后，本文将会介绍一种极少见的promise奇淫怪技，解决一些难以解决的又不得不解决的异步冲突</p>
</blockquote>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>虽然<code>mongoose</code>本身也有自带<code>promise</code>且大部分操作返回就是一个<code>promise</code>对象，但大多数情况下我们还是毅然决然的换成<code>bluebird</code>这个promise库，其中提供了大量的<br>promise操作可供我们使用，废话少说，赶紧上路！</p>
<h2 id="Bad-example"><a href="#Bad-example" class="headerlink" title="Bad example"></a>Bad example</h2><p>你可能看过这样的<code>Promise</code>链中链</p>
<pre class=" language-javascript"><code class="language-javascript">user_group<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">findUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>userObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token operator">...</span><span class="token punctuation">.</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>看到这里不用写都应该能发现，这<code>Promise</code>已经失去了它原本的使命，层层嵌套，犹如又回到了地狱回调的节奏，可读性不免让人觉得糟糕</p>
<h2 id="Let’s-pratice"><a href="#Let’s-pratice" class="headerlink" title="Let’s pratice"></a>Let’s pratice</h2><p>我们可以来动手改写一下</p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续.."></a>未完待续..</h2>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> promise </tag>
            
            <tag> mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用supertest进行API测试]]></title>
      <url>http://tecknight.xyz/2017/04/23/%E7%94%A8supertest%E8%BF%9B%E8%A1%8CAPI%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>在node开发中，写完了API接口之后，往往都要进行测试，现在常用的测试模块一般都是<code>mocha</code>和<code>chai</code>，<br>然后我们应该有相配合的请求模块来帮助我们更好地完成断言的工作，今天要介绍的主角就是<code>supertest</code></p>
<p>用过<code>superagent</code>的童鞋应该都知道，<code>supertest</code>的用法同样简洁优雅，本文环境基于<code>Express</code>，废话不说，上实战代码</p>
<h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chai'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>assert<span class="token punctuation">;</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'supertest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> should <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'should'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 将supertest设成request是习惯使然</span>

<span class="token comment" spellcheck="true">// 断言</span>
<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"get /"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// it描述了API的功能，预期的返回内容</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should respond with ...."</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 使用supertest进行GET请求，并验证其返回的状态码</span>
        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置请求头</span>
            <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//预期的状态码</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                assert<span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 使用assert断言库进行断言，如果lodash找不到json中的最外层的键值对(找里面的话可以在body的基础上继续访问)</span>
                    <span class="token comment" spellcheck="true">// 使用equal或者是to.include.keys('key')也是可以的</span>
                    <span class="token string">'key'</span> <span class="token punctuation">:</span> <span class="token string">'value'</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 前面不再赘述，我们专注于supertest</span>
<span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'value'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// x-www-form-urlencoded</span>
        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// form-data</span>
        <span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token string">'test/fixtures/homeboy.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// post上传附件</span>
</code></pre>
<h3 id="PUT或DELETE请求"><a href="#PUT或DELETE请求" class="headerlink" title="PUT或DELETE请求"></a>PUT或DELETE请求</h3><p>同理</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">'/path'</span><span class="token punctuation">)</span>
<span class="token function">request</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/path'</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> Express </tag>
            
            <tag> api </tag>
            
            <tag> test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最精简restful实现]]></title>
      <url>http://tecknight.xyz/2017/04/12/%E6%9C%80%E7%B2%BE%E7%AE%80restful%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="Time-is-short-Just-show-me-the-code"><a href="#Time-is-short-Just-show-me-the-code" class="headerlink" title="Time is short. Just show me the code!"></a>Time is short. Just show me the code!</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
附上测试方法
curl -X GET http://localhost:3000
curl -X POST -d "Node should test in action" http://localhost:3000
curl -X DELETE http://localhost:3000/1
curl -X PUT -d "Pratice node every day" http://localhost:3000/1
*/</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// method include POST,GET,DELETE,PUT</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
            <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// convert bytes to utf-8 encoding data</span>
            req<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// listening data event, POST data will send to server by chunk (bytes array)</span>
            req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                item <span class="token operator">+</span><span class="token operator">=</span>chunk<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>
            items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">') '</span> <span class="token operator">+</span> element <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'DELETE'</span><span class="token punctuation">:</span>
            <span class="token keyword">var</span> path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//get string '/1'</span>
            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// convert String to Number</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Invalid item id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Item not found!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'delete success!\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'PUT'</span><span class="token punctuation">:</span>
            <span class="token keyword">var</span> newItem <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> putPath <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
            <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>putPath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Invalid item id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'item not found!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    newItem <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                items<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> newItem<span class="token punctuation">;</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'update success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> native </tag>
            
            <tag> RESTFul </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 语法基础]]></title>
      <url>http://tecknight.xyz/2017/04/11/python-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h4 id="其中记录了python跟别的语言不一样的一些基础知识点"><a href="#其中记录了python跟别的语言不一样的一些基础知识点" class="headerlink" title="其中记录了python跟别的语言不一样的一些基础知识点"></a>其中记录了python跟别的语言不一样的一些基础知识点</h4><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><figcaption><p><code>False</code></p></figcaption><pre class=" language-True</code></p>"><h4 id="除法"><a href="#除法" class="headerlink" title="除法"><code class="language-True</code></p>"><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p><code>/</code> 默认的除法是精确除法</p>
<p><code>//</code> 才是通常的取商的整数部分</p>
<h4 id="字符-类似C的ASCII码"><a href="#字符-类似C的ASCII码" class="headerlink" title="字符(类似C的ASCII码)"></a>字符(类似C的ASCII码)</h4><p><code>ord()</code> 字符对应编码</p>
<p><code>chr()</code> 编码转字符</p>
<p><code>'aaa'.encode('utf-8')</code> 转成对应编码形式的<code>bytes</code></p>
<p><code>'aaa'.decode('utf-8')</code> 从<code>bytes</code>转成<code>utf-8</code>编码</p>
<h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><pre><code class="python">r = 18.0555
'%.2f%%' %r
# '18.06%'
</code></pre>
<h4 id="数据类型之list-类比数组"><a href="#数据类型之list-类比数组" class="headerlink" title="数据类型之list(类比数组)"></a>数据类型之list(类比数组)</h4><p>获取<code>list</code>元素个数<code>len(变量名)</code></p>
<p>访问元素下标为负表示都是第几个元素</p>
<p>末尾添加元素 <code>vary.append(...)</code></p>
<p>插入指定位置 <code>vary.insert(1, &#39;Jack&#39;)</code></p>
<p>末尾元素去除 <code>vary.pop()</code></p>
<p>去除指定位置 <code>vary.pop(2)</code></p>
<p>元素之间的数据类型可不同</p>
<h4 id="数据类型之tuple元组"><a href="#数据类型之tuple元组" class="headerlink" title="数据类型之tuple元组"></a>数据类型之tuple元组</h4><p>与<code>list</code>相比这样定义出来的数组内的元素是不可直接变的，数据更加安全</p>
<p>间接改变的原理：<code>tuple是保持元素的指向不变，指向的内容是可能可变的，例如元素是list</code></p>
<pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p><code>:</code> 替代花括号块</p>
<p><code>elif</code> 等价于其他语言的 <code>else if</code></p>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><code>for-in</code> 循环    <code>for x in ...:</code></p>
<p><code>continue</code> 打破当前循环进入下一次循环</p>
<p><code>break</code> 退出循环体</p>
<h4 id="dict-键值对"><a href="#dict-键值对" class="headerlink" title="dict 键值对"></a>dict 键值对</h4><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">}</span>
d<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 22</span>
</code></pre>
<p>找不到<code>key</code>时会报错，所以查<code>key</code>之前要判断一下<code>key in d</code>的返回值再查找</p>
<p>或者</p>
<p><code>d.get(&#39;B&#39;, -1)</code> 第二个参数指定了找不到时返回的值</p>
<p><code>dict</code> 中的<code>key</code>不可变</p>
<p>删除 <code>d.pop(key)</code></p>
<h4 id="set-key的集合"><a href="#set-key的集合" class="headerlink" title="set key的集合"></a>set key的集合</h4><p>初始化需传入一个<code>list</code>，传入的元素不能有重复的</p>
<pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># {5, 6, 7}</span>
</code></pre>
<p>添加 <code>add(key)</code></p>
<p>删除 <code>remove(key)</code></p>
<h4 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h4><p><code>str.remove(&#39;a&#39;, &#39;A&#39;)</code>将<code>a</code>替换成<code>A</code>但是方法会返回一个新的串，原来的<code>str</code>不可变！</p>
<h4 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h4><p><code>abs()</code></p>
<p><code>max()</code> 可以放任意个参数只返回最大</p>
<p><code>a = abs</code> 给<code>abs</code>函数引用发给<code>a</code>，调用<code>a()</code>效果一样</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p><code>int(要转换的变量)</code></p>
<p>其他类似</p>
<h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><p><code>def</code> 替代<code>function</code></p>
<h4 id="缩进体置空"><a href="#缩进体置空" class="headerlink" title="缩进体置空"></a>缩进体置空</h4><p><code>pass</code></p>
<h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>居然可以有多个!! 我的三观…</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">goBack</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y

a<span class="token punctuation">,</span>b <span class="token operator">=</span> goBack<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre>
<p>原因：返回的是<code>tuple</code></p>
<h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">goBack</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">,</span> float<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> x<span class="token punctuation">,</span>y
<span class="token comment" spellcheck="true"># 允许int和float类型</span>
</code></pre>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment" spellcheck="true"># n默认值为2</span>
</code></pre>
<p><code>默认参数必须指向不变对象</code></p>
<p>参数可以是 <code>list</code> 或者 <code>tuble</code>，利用可变参数</p>
<p>可变参数 <code>def calc(*numbers):</code> 多参数自动组装成<code>tuple</code></p>
<p>关键字参数 <code>def person(name, age, **kw):</code> 方便扩展函数的参数</p>
<p><code>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</code></p>
<h4 id="尾递归优化递归函数"><a href="#尾递归优化递归函数" class="headerlink" title="尾递归优化递归函数"></a>尾递归优化递归函数</h4><p><code>指在函数返回的时候，调用自身本身，并且，return语句不能包含表达式</code></pre>
<p>注意：标准解释器并不支持这种用法</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习的常用概念]]></title>
      <url>http://tecknight.xyz/2017/04/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h4 id="特征-属性"><a href="#特征-属性" class="headerlink" title="特征(属性)"></a>特征(属性)</h4><p>通常是训练样本集的列，可看作是每个列的列名，比如区分鸟的品种可以用体重，后背颜色此类的特征来加以区分</p>
<h4 id="特征实例"><a href="#特征实例" class="headerlink" title="特征实例"></a>特征实例</h4><p>某一特征列其中的数据</p>
<h4 id="特征的种类"><a href="#特征的种类" class="headerlink" title="特征的种类"></a>特征的种类</h4><ul>
<li>数值型</li>
<li>二值型(类似布尔型)</li>
<li>枚举类型(颜色色值)</li>
</ul>
<h4 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h4><p>训练集是用于训练机器学习算法的数据样本集合</p>
<h4 id="训练样本"><a href="#训练样本" class="headerlink" title="训练样本"></a>训练样本</h4><p>样本集的每一行就是一个训练样本</p>
<h4 id="目标变量"><a href="#目标变量" class="headerlink" title="目标变量"></a>目标变量</h4><p>机器学习算法的预测结果</p>
<p>分类:</p>
<ul>
<li>分类算法中，通常为标称型，目标变量称为<code>类别</code></li>
<li>回归算法中，通常为连续型</li>
</ul>
<p>训练样本集前必须要确定目标变量的值，比如根据鸟的身高，体重，颜色这些特征可以具体确定鸟的品种，品种就是目标变量，<br>而品种的值就是具体的品种名称，也就是目标变量的值</p>
<h4 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h4><p>指展示机器分类的结果的工作</p>
<p>形式包括：<code>规则集</code> <code>概率分布</code> <code>训练样本集中的实例</code> </p>
<h4 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h4><p>以便机器学习算法发现特征与目标变量的关系</p>
<p><em>机器学习的主要任务就是分类</em></p>
<p>将实例数据划分到合适的分类中</p>
<p>分类的基本流程：</p>
<ol>
<li>得到全部特征信息</li>
<li>算法训练(学习如何分类)</li>
<li>测试机器学习算法的效果</li>
</ol>
<h4 id="如何测试算法的效果？"><a href="#如何测试算法的效果？" class="headerlink" title="如何测试算法的效果？"></a>如何测试算法的效果？</h4><p>为了测试效果，通常会使用两套独立的样本集：<code>训练数据</code> 和 <code>测试数据</code></p>
<p><em>机器学习另外一个重要的任务：回归</em></p>
<p>主要用于预测数值型数据</p>
<h4 id="程序开始运行"><a href="#程序开始运行" class="headerlink" title="程序开始运行:"></a>程序开始运行:</h4><p>训练样本集提供目标变量 =&gt; 输入到算法 =&gt; 训练完成 =&gt; 输入测试数据(不包含目标变量) =&gt; 比较测试结果与实际目标变量的差别(回归拟合) =&gt; 得出算法的实际精确度</p>
<h4 id="监督学习与无监督学习"><a href="#监督学习与无监督学习" class="headerlink" title="监督学习与无监督学习"></a>监督学习与无监督学习</h4><p>监督学习指算法知道预测什么，也就是有明确的目标</p>
<p>回归和分类都是属于监督学习</p>
<p>与监督学习相比，无监督学习没有目标值</p>
<h3 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h3><p>作用：</p>
<ul>
<li>减少数据特征的维度</li>
</ul>
<h4 id="聚类-分析"><a href="#聚类-分析" class="headerlink" title="聚类(分析)"></a>聚类(分析)</h4><p>把相似的对象通过静态分类的方法分成不同组别或者更多的子集，相当于是把一个训练集分成了多个训练集，每个新训练集中的数据的特征相似</p>
<h4 id="密度估计"><a href="#密度估计" class="headerlink" title="密度估计"></a>密度估计</h4><p>指寻找描述数据统计值的过程，可以理解为要得到关于描述数据的 <code>频率分布直方图</code>，降低特征维度，使其更直观</p>
<h3 id="浅谈算法的选择"><a href="#浅谈算法的选择" class="headerlink" title="浅谈算法的选择"></a>浅谈算法的选择</h3><ul>
<li>以目的为导向：根据要完成的任务，选择监督学习的或者是非监督学习的算法</li>
<li>以数据来源为导向：需要分析或收集的数据是什么</li>
</ul>
<h3 id="开发机器学习应用程序的大概步骤"><a href="#开发机器学习应用程序的大概步骤" class="headerlink" title="开发机器学习应用程序的大概步骤"></a>开发机器学习应用程序的大概步骤</h3><ol>
<li><p>收集数据</p>
</li>
<li><p>准备输入数据</p>
</li>
<li><p>分析输入数据(人工)</p>
</li>
<li><p>训练算法(机器学习)</p>
</li>
<li><p>测试算法</p>
</li>
<li><p>使用算法</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux WEB基础 学习笔记]]></title>
      <url>http://tecknight.xyz/2017/03/29/Linux-WEB%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="系统版本选择"><a href="#系统版本选择" class="headerlink" title="系统版本选择"></a>系统版本选择</h2><ul>
<li>根据不同发行版本的特性</li>
</ul>
<h3 id="red-hat-企业（付费）"><a href="#red-hat-企业（付费）" class="headerlink" title="red hat 企业（付费）"></a>red hat 企业（付费）</h3><h3 id="ubuntu-跨设备：服务器，台式，笔记本，嵌入式设备"><a href="#ubuntu-跨设备：服务器，台式，笔记本，嵌入式设备" class="headerlink" title="ubuntu 跨设备：服务器，台式，笔记本，嵌入式设备"></a>ubuntu 跨设备：服务器，台式，笔记本，嵌入式设备</h3><h3 id="debian-稳定可靠，但更新周期长"><a href="#debian-稳定可靠，但更新周期长" class="headerlink" title="debian 稳定可靠，但更新周期长"></a>debian 稳定可靠，但更新周期长</h3><h3 id="Mint-台式机用户并支持专利性媒体"><a href="#Mint-台式机用户并支持专利性媒体" class="headerlink" title="Mint 台式机用户并支持专利性媒体"></a>Mint 台式机用户并支持专利性媒体</h3><h3 id="Core-OS-容器化应用程序的计算机集群建设"><a href="#Core-OS-容器化应用程序的计算机集群建设" class="headerlink" title="Core OS 容器化应用程序的计算机集群建设"></a>Core OS 容器化应用程序的计算机集群建设</h3><h2 id="系统路径"><a href="#系统路径" class="headerlink" title="系统路径"></a>系统路径</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">pwd</span>
</code></pre>
<p><strong>返回当前的目录位置</strong></p>
<figcaption><p>所有<code>Linux</code>系统中都可以找到<code>/home</code>这样的目录，除少数例外情况，<code>home</code>目录可以容纳每个用户的所有主目录</p></figcaption><pre class=" language-/</code>表示系统的根目录，可以进入的最高位置</p>"><pre><code class="bash"><code class="language-/</code>表示系统的根目录，可以进入的最高位置</p>"><pre><code class="bash">ls -a
</code></pre>
<p><strong>显示所有文件包括隐藏文件</strong></p>
<p>任何前缀是<code>.</code>的文件都是会被系统隐藏的</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -al
</code></pre>
<p>以长格式打印所有文件信息</p>
<img src="/2017/03/29/Linux-WEB基础-学习笔记/2.png" alt="2.png" title="">
<pre class=" language-bash"><code class="language-bash">drwxr-xr-x 4 root root 4096 Jul 2 21:00 <span class="token punctuation">..</span>
</code></pre>
<p>首字符为d，代表这个结果是目录，<code>-</code>代表文件</p>
<p>后面的每三个分割开来看，分别对应所有者<code>owner</code>，组<code>group</code>，所有人<code>everyone</code></p>
<p>分别是读，写和是否为可执行文件对应字母为<code>r</code>,<code>w</code>,<code>x</code></p>
<p>后面紧接着就是所有者和组，linux在创建用户的时候会自动创建相同名字的组</p>
<h2 id="根目录常用文件夹"><a href="#根目录常用文件夹" class="headerlink" title="根目录常用文件夹"></a>根目录常用文件夹</h2><p><code>etc</code> 存储配置文件，配置服务器的时候就会修改其中的文件</p>
<p><code>var</code> 存储可变的文件，里面的文件一般会随着时间的推移而变大，可找到系统日志和应用程序日志</p>
<p><code>bin</code> 用于存储可执行的二进制文件，所有用户都可以访问，一般在启动时和系统维护进程中用到</p>
<p><code>sbin</code> 与<code>bin</code>类似除了其中的可执行文件只能被<code>root</code>用户用于系统管理和维护</p>
<p><code>lib</code> 存储支持系统中存储的二进制文件的库文件</p>
<p><code>usr</code> 用于存储用户程序</p>
<h2 id="命令的运行过程"><a href="#命令的运行过程" class="headerlink" title="命令的运行过程"></a>命令的运行过程</h2><ol>
<li>输入<code>ls</code></li>
<li>系统在<code>$path</code>中按顺序寻找路径下名称为<code>ls</code>的可执行文件</li>
<li>找到在<code>bin</code>中</li>
</ol>
<h2 id="Linux-安全"><a href="#Linux-安全" class="headerlink" title="Linux 安全"></a>Linux 安全</h2><h3 id="使用最少权限"><a href="#使用最少权限" class="headerlink" title="使用最少权限"></a>使用最少权限</h3><p><strong>超级用户root</strong></p>
<p>通常情况下，我们禁用root的可远程访问权限，用自己创建的身份登录，然后通过其他命令，我们也可以以root身份运行超级用户的命令，使服务器在用户名及密码未知的情况下被攻破的可能性得到降低</p>
<p>普通用户可以在命令前面加上<code>sudo</code>来以<code>root</code>的身份运行命令，其中的好处是会出现警告，提前预知危险</p>
<h3 id="使用包管理软件"><a href="#使用包管理软件" class="headerlink" title="使用包管理软件"></a>使用包管理软件</h3><p>所有可用的程序包来源都会列在<code>/etc/apt/sources.list</code>文件中</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
</code></pre>
<p>更新仓库源，并不会对系统进行更改</p>
<p>真正升级包要使用</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
</code></pre>
<h4 id="包finger的使用"><a href="#包finger的使用" class="headerlink" title="包finger的使用"></a>包finger的使用</h4><p>用途：用于查询用户的各种信息打印成易于阅读的格式</p>
<p>Command</p>
<pre class=" language-bash"><code class="language-bash">finger
finger 用户名
</code></pre>
<p>用户信息大部分都存储在<code>/etc/passwd</code>中，用<code>cat</code>打开如下</p>
<img src="/2017/03/29/Linux-WEB基础-学习笔记/1.png" alt="1.png" title="">
<p>文件中的每一行代表一个单独的用户，每个条目包含数个由冒号隔开的字段</p>
<p>第一个字段是指用户名，第二个用于存储加密的密码，第三和第四字段分别存储用户的ID和组ID，第五个字段用于存储更多说明，最后两个是用户的主目录和用户默认的<code>shell</code>，可以看到，linux的<code>root</code>用户的组ID和用户ID都是0</p>
<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><ul>
<li>创建新用户</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> adduser student
</code></pre>
<ul>
<li>远程SSH登录</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> student@127.0.0.1 -p 2222
</code></pre>
<p><code>用户名@IP地址</code></p>
<p><code>-p 端口号</code></p>
<ul>
<li>赋予<code>sudo</code>权限</li>
</ul>
<p>有sudo权限的用户登录执行</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/sudoers
</code></pre>
<p>ubuntu中有<code>sudo</code>权限的用户都在<code>/etc/sudoers.d</code>中</p>
<p>可使用已有的用户进行<code>cp</code>成用户名，然后用<code>nano</code>进行编辑</p>
<p>将名字改为用户名保存</p>
<ul>
<li>强制下次登录时重置密码</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> -e 用户名
</code></pre>
<h3 id="基于密钥的身份验证"><a href="#基于密钥的身份验证" class="headerlink" title="基于密钥的身份验证"></a>基于密钥的身份验证</h3><h4 id="公共密钥加密"><a href="#公共密钥加密" class="headerlink" title="公共密钥加密"></a>公共密钥加密</h4><p>服务器发送任意消息至客户端，客户端用私有密钥进行加密，再将加密后的消息发送给服务器，服务器用公共密钥进行解密，如果与服务器发送的值相等，那么通过</p>
<p><strong>私有密钥要自己保留</strong></p>
<h4 id="在本地生成密钥对"><a href="#在本地生成密钥对" class="headerlink" title="在本地生成密钥对"></a>在本地生成密钥对</h4><pre class=" language-bash"><code class="language-bash">ssh-keygen
</code></pre>
<p>为密钥添加密码</p>
<p>生成的<code>.pub</code>文件就是放在服务器上用于密码身份验证的文件</p>
<h4 id="将公钥放在服务器上"><a href="#将公钥放在服务器上" class="headerlink" title="将公钥放在服务器上"></a>将公钥放在服务器上</h4><p>登录</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> .ssh
<span class="token function">touch</span> .ssh/authorized_keys
</code></pre>
<p>拷贝本地的密钥内容至服务器更创建的文件中，并为文件设置权限</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 700 .ssh
<span class="token function">chmod</span> 644 .ssh/authorized_keys
</code></pre>
<p>使用ssh密钥登录</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> student@127.0.0.1 -p 2222 -i ~/.ssh/密钥名称
</code></pre>
<h4 id="禁用密码登录"><a href="#禁用密码登录" class="headerlink" title="禁用密码登录"></a>禁用密码登录</h4><ul>
<li>编辑<code>SSHD</code>配置文件</li>
</ul>
<p>SSHD: 运行于服务器上监听SSH连接的服务</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config
</code></pre>
<p>将<code>PasswordAuthentication</code>设置为<code>no</code>保存</p>
<p>然后重启服务，让它重新读取配置文件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart
</code></pre>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><img src="/2017/03/29/Linux-WEB基础-学习笔记/3.png" alt="3.png" title="">
<h4 id="数字与权限的关系"><a href="#数字与权限的关系" class="headerlink" title="数字与权限的关系"></a>数字与权限的关系</h4><p>r = 4</p>
<p>w = 2</p>
<p>x = 1</p>
<p>无需权限，值为0</p>
<p>加在一起即为要进行应用的全部权限数量（注意只是对于一种用户）</p>
<p><strong>系统需要一次处理三个权限，以一次设置用户，组和所有人的权限</strong></p>
<h4 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h4><pre><code>chmod 数字 文件夹或文件 //改权限
chown 所有者 文件 //更改所有者
chgrp 组名 文件名 //更改组
</code></pre><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>每个应用程序都会被分配端口来处理各自的请求</p>
<p>常见端口如下图</p>
<img src="/2017/03/29/Linux-WEB基础-学习笔记/4.png" alt="4.png" title="">
<p>通过防火墙，可以控制服务器允许哪个端口接受请求</p>
<h4 id="只开放让应用程序行使正常功能的端口"><a href="#只开放让应用程序行使正常功能的端口" class="headerlink" title="只开放让应用程序行使正常功能的端口"></a>只开放让应用程序行使正常功能的端口</h4><h4 id="ubuntu-ufw-防火墙"><a href="#ubuntu-ufw-防火墙" class="headerlink" title="ubuntu ufw 防火墙"></a>ubuntu ufw 防火墙</h4><p>激活<code>ufw</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw status //查看状态
</code></pre>
<p><strong>写入防火墙规则并开启防火墙</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw default deny incoming  //阻止所有 default allow outgoing 允许所有
<span class="token function">sudo</span> ufw allow <span class="token function">ssh</span>    //允许开放SSH连接端口
<span class="token function">sudo</span> ufw allow www     //允许HTTP请求
<span class="token function">sudo</span> ufw <span class="token function">enable</span>        //开启防火墙
</code></pre>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> web </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Express下多次callback引发的问题]]></title>
      <url>http://tecknight.xyz/2017/03/23/Express%E4%B8%8B%E5%A4%9A%E6%AC%A1callback%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="错误结果"><a href="#错误结果" class="headerlink" title="错误结果"></a>错误结果</h3><blockquote>
<p>Error: Can’t render headers after they are sent to the client.</p>
<p>错误：当响应头被发回客户端时不能被正确渲染！</p>
</blockquote>
<h3 id="出现场景"><a href="#出现场景" class="headerlink" title="出现场景"></a>出现场景</h3><blockquote>
<p>Express环境下使用mongoose model 进行模糊查询时，需要用ORM进行至少一次至多两次的查询，查询用的都是Promise进行的异步操作</p>
</blockquote>
<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><ul>
<li><p><strong>响应头的设置出现了冲突</strong>  </p>
</li>
<li><p>是<code>res.send(docs)</code>出错</p>
</li>
<li><p><strong>调试时移除了其中一个<code>Promise</code>查询，错误消失</strong></p>
</li>
<li><p>问题出在<code>Promise</code>上</p>
</li>
</ul>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><strong>为什么连续的两个<code>Promise</code>回调会最终导致响应头渲染冲突?</strong></p>
<p>渲染冲突出现在错误的顶部，跟错误抛出的顺序有关，这与<code>Express</code>自带的<code>res</code>对象有关，而<code>res</code>又继承自<code>node.js</code>原生的<code>http.ServerResponse</code> 类，在<code>res</code>调用<code>res.writeHead(statusCode)</code>写入响应头的状态码之前，我们可以尽情的写入响应头的头信息，在一个<code>res.send(docs)</code>中，应该包含着以下几步，有的是<code>exprerss</code>自己的，有的则是属于<code>node</code>原生<code>http</code>模块的</p>
<p><strong>按以下顺序开始运行:</strong></p>
<blockquote>
<p>res.writeContinue()</p>
<p>res.statusCode = 404</p>
<p>res.setHeader(name, value)</p>
<p>res.getHeader(name)</p>
<p>res.removeHeader(name)</p>
<p>res.header(key[, val]) (Express only)</p>
<p>res.charset = ‘utf-8’ (Express only)</p>
<p>res.contentType(type) (Express only)</p>
<p>res.send([body]) (Express only)</p>
</blockquote>
<p>最后我们的查询数据是以响应内容中的<code>body</code>的形式返回给客户端的，当要进行<code>send</code>的时候，<code>node</code>自带的函数就会先运行，当然运行第一个<code>Promise</code>的时候是没有问题的，问题在于:<strong><code>send</code>本身并不能中断当前执行的任务</strong>，只要还没有<code>return</code>，代码仍然会继续运行，这也恰恰印证了<code>node</code>的异步非阻塞IO的特性，即便是第一个<code>Promise</code>执行时，并不会阻塞第二个<code>Promise</code>的继续执行，如果第一个<code>Promise</code>的<code>res.send</code>已经执行，当第二个<code>Promise</code>被执行时，执行至第三步，也就是设置响应头的时候原先的响应头信息依然存在，触犯了<strong><code>node</code></strong>中不能重复设置响应头信息的规定，所以<code>node</code>先抛错，这一切看起来也就顺其自然了</p>
<h3 id="All-in-all-解决方案呢？"><a href="#All-in-all-解决方案呢？" class="headerlink" title="All in all 解决方案呢？"></a>All in all 解决方案呢？</h3><ul>
<li>避免使用多次<code>send</code>,多次设置响应头就会出现此错误</li>
<li>谨慎使用异步<code>Promise</code>，可以考虑<code>Promise</code>嵌套<strong>（推荐）</strong></li>
<li><code>send</code>之前记得加上<code>return</code>让后面的代码不会运行，但这个方法不好难以控制，当异步操作写在一起的时候，谁知道会是哪一个家伙先结束呢？ </li>
</ul>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> Express </tag>
            
            <tag> 问题总结 </tag>
            
            <tag> 异步 </tag>
            
            <tag> Debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 升级最新版本git]]></title>
      <url>http://tecknight.xyz/2017/03/11/CentOS-7-%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%ACgit/</url>
      <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h3><blockquote>
<p>CentOS 上的最新git版本也只有1.8.3，就想试着装上最新的版本，没想到差点玩脱，全当记录一次冒险经历</p>
</blockquote>
<ul>
<li>Development tools 没装的要装上，不然GCC编译时会出错</li>
</ul>
<pre><code># yum -y groupinstall Development tools
</code></pre><ul>
<li>再卸载CentOS自带的老版本git </li>
</ul>
<pre><code># yum -y remove git
</code></pre><h3 id="下载git并安装"><a href="#下载git并安装" class="headerlink" title="下载git并安装"></a>下载git并安装</h3><pre><code># cd /usr/src
# wget https://www.kernel.org/pub/software/scm/git/git-2.12.0.tar.gz
# tar xzf git-2.12.0.tar.gz
</code></pre><h4 id="安装注意事项："><a href="#安装注意事项：" class="headerlink" title="安装注意事项："></a>安装注意事项：</h4><pre><code># cd git-2.12.0
# make prefix=/usr/local/git all
</code></pre><p>此时报错</p>
<pre class=" language-bash"><code class="language-bash">/usr/src/git-2.12.0/utf8.c:463：对‘libiconv’未定义的引用
libgit.a<span class="token punctuation">(</span>utf8.o<span class="token punctuation">)</span>：在函数‘reencode_string_len’中：
/usr/src/git-2.12.0/utf8.c:524：对‘libiconv_open’未定义的引用
/usr/src/git-2.12.0/utf8.c:535：对‘libiconv_close’未定义的引用
/usr/src/git-2.12.0/utf8.c:529：对‘libiconv_open’未定义的引用
collect2: 错误：ld 返回 1
make: *** <span class="token punctuation">[</span>git-credential-store<span class="token punctuation">]</span> 错误 1
</code></pre>
<p>原方案：</p>
<pre><code># make prefix=/usr/local/git all
# make prefix=/usr/local/git install
</code></pre><p>解决方案：</p>
<p>可替换为</p>
<pre><code># ./configure --without-iconv
# make CFLAGS=-liconv prefix=/usr/local/git all
# make CFLAGS=-liconv prefix=/usr/local/git install
</code></pre><h3 id="最后将git加入环境变量"><a href="#最后将git加入环境变量" class="headerlink" title="最后将git加入环境变量"></a>最后将git加入环境变量</h3><pre><code># echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc
# source /etc/bashrc
</code></pre><p><strong>大功告成！查看一下git的版本</strong></p>
<pre><code># git --version
&gt;&gt; git version 2.12.0
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> centOS </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-router 快速入门]]></title>
      <url>http://tecknight.xyz/2017/03/01/vue-router-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> vue-router --save
</code></pre>
<a id="more"></a>
<p>routes.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./pages/Home.vue'</span>
<span class="token keyword">import</span> Gifs <span class="token keyword">from</span> <span class="token string">'./pages/Gifs.vue'</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">'./pages/User.vue'</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/gifs'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Gifs <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//指定路由和对应要渲染的组件</span>
    <span class="token comment" spellcheck="true">//404的path应该是'*',要放在最末尾，当前面的都匹配不到时才匹配到404页面</span>
    <span class="token comment" spellcheck="true">//this.$route.params.id 可以从路由中拿到id数据</span>
<span class="token punctuation">]</span>
</code></pre>
<p>main.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./routes'</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//路由初始化</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routes
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//将路由注入根组件</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
  router<span class="token punctuation">,</span>
  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>App.vue</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
</code></pre>
<p>在模板中标注出组件渲染的位置</p>
<h3 id="号的含义"><a href="#号的含义" class="headerlink" title="#号的含义"></a>#号的含义</h3><p>#号前表示的是发送给服务端的请求，要求返回html文件，而#号后表示的是发送给本地js的请求以寻求解决</p>
<h3 id="路由参数动态绑定"><a href="#路由参数动态绑定" class="headerlink" title="路由参数动态绑定"></a>路由参数动态绑定</h3><p>使用watch</p>
<pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'$route'</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//to当前路由，from上一个路由</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="路由的数据传递"><a href="#路由的数据传递" class="headerlink" title="路由的数据传递"></a>路由的数据传递</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>userEdit<span class="token punctuation">'</span>, params: { id: $route.params.id }, query: { locale: <span class="token punctuation">'</span>en<span class="token punctuation">'</span>, list: 2 } }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
</code></pre>
<p>传<code>query</code>参数可以达到地址栏出现<code>/?locale=en&amp;list=2</code><br>通过 <code>$route.query.键名</code> 来访问</p>
<h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p><code>router-view</code> 可以通过配置名字 <code>name</code> 来指定组件渲染的位置，增加了组件的复用性，比如分成 <code>header</code> <code>main</code> <code>hero</code> <code>footer</code> 来分别在一个视图中的不同位置上加载不同的组件 </p>
<h3 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h3><p>我们只需要加载我们需要的组件呈现给用户，而其他不需要第一时间加载的组件，可以使用 <code>webpack</code> 实现异步加载，只在需要的时候才会发出请求，请求加载另一个组件</p>
<p>routes.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./components/user/User.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./components/user/User.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'GroupName'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//webpack 异步加载，通过组名，将要同时一起加载的组件打包加载</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vuex快速入门]]></title>
      <url>http://tecknight.xyz/2017/02/08/vuex%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="基本用途："><a href="#基本用途：" class="headerlink" title="基本用途："></a>基本用途：</h3><ul>
<li><p>将某些data变成组件间公用的状态，组件随时都可以进行访问和响应，解决了<code>props</code>传值的链式响应的代码冗余</p>
</li>
<li><p>给状态配以公用方法，将状态的变更及时响应并处理</p>
</li>
</ul>
<h3 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h3><a id="more"></a>
<p>/store/store.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        sideBarOpened<span class="token punctuation">:</span> <span class="token boolean">false</span>
        <span class="token comment" spellcheck="true">//放置公用状态</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        changeState<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//相当于vue实例中的methods,用于处理公用data</span>
            <span class="token comment" spellcheck="true">//自vuex 面向组件的数据处理</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//写法与getters相类似</span>
        <span class="token comment" spellcheck="true">//组件想要对于vuex 中的数据进行的处理</span>
        <span class="token comment" spellcheck="true">//组件中采用this.$store.commit('方法名') 的方式调用，实现充分解耦</span>
        <span class="token comment" spellcheck="true">//内部操作必须在此刻完成(同步)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//使得mutations能够实现异步调用，实现例如延迟调用</span>
        increment <span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'突变方法名'</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//payload应该是一个对象，可通过模板方法调用传入对象的方式将数据从组件传入vuex</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token function">asyncIncrement</span><span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
              <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                  <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//引入某一个state的以上集合的模块，会自动分别填充到上面，使得结构更加清晰</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>main.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store/store'</span>
<span class="token operator">*</span>
<span class="token operator">*</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//注入根组件</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="访问vuex中的数据和方法"><a href="#访问vuex中的数据和方法" class="headerlink" title="访问vuex中的数据和方法"></a>访问vuex中的数据和方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>数据名
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>方法名
</code></pre>
<p>受影响组件局部定义计算属性响应变化数据</p>
<pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
     open <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>sideBarOpened
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>将 store 中的 getters/mutations 映射到局部(计算属性/方法)使用<code>mapGetters/mapMutations</code>辅助函数</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>

computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 使用对象展开运算符将 getters 混入 computed 对象中</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token comment" spellcheck="true">//映射 this.doneTodosCount 为 store.getters.doneTodosCount</span>
      <span class="token string">'doneTodosCount'</span><span class="token punctuation">,</span>
      <span class="token comment" spellcheck="true">//'getter名称',</span>

      <span class="token comment" spellcheck="true">// 映射 this.doneCount 为 store.getters.doneTodosCount</span>
          doneCount<span class="token punctuation">:</span> <span class="token string">'doneTodosCount'</span>
      <span class="token comment" spellcheck="true">// 三个点表示将内部拿出生成键值对，这样使得组件本身的计算属性不受影响</span>
      <span class="token comment" spellcheck="true">// 此语法依赖babel-preset-stage-2</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>mutation 必须是同步函数 — devtool要保存快照，方便追踪状态变化</p>
<p>使用 v-model 绑定 vuex 计算属性的时候要设置get 和 set 才能双向绑定</p>
<pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">set</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateValue'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel5 新手填坑指南]]></title>
      <url>http://tecknight.xyz/2017/02/03/Laravel%20%E6%96%B0%E6%89%8B%E5%A1%AB%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h3 id="浏览器篇"><a href="#浏览器篇" class="headerlink" title="浏览器篇"></a>浏览器篇</h3><p>开发浏览器: Chorme（不用解释）</p>
<p>注意事项：</p>
<p>一定要先清缓存！清缓存！清缓存！ 重要的说三遍。</p>
<h3 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h3><p>开发环境：</p>
<p>Mac/Linux (少很多麻烦)</p>
<p>首选: Laravel Homestead (Mac上配置很轻松)</p>
<h3 id="正确开发习惯养成"><a href="#正确开发习惯养成" class="headerlink" title="正确开发习惯养成"></a>正确开发习惯养成</h3><p>千万注意每一个<code>function</code>的内容编写的时候先把<code>return</code>带上，返回的一般为数据或视图亦或是附上数据的视图，就算返回视图也要返回一个提示的局部视图闪现</p>
<h3 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h3><ol>
<li><p>涉及数据库的命令除了<code>artisan</code>新建<code>Model</code>文件以外最好都在虚拟机中执行，包括用<code>php artisan migrate</code></p>
</li>
<li><p><code>Model</code>中的代码改变之后，最好<code>migrate:refresh</code>一下，虽然还不理解Eloquent背后的机制，但是可以肯定的是，这样一种映射结构是牢固紧密的，如果Model中的函数被调用一次，那么,这种调用的映射关系会与数据库有持久性关联，如果<code>Model</code>的函数写错了，并且此函数被调用过了，请麻烦<code>refresh</code>一下</p>
</li>
<li><p>Eloquent 修改器在写的时候一定谨慎编写，尤其是用<code>bcrypt</code>加密密码存入数据库的时候</p>
</li>
</ol>
<h5 id="注意：如果不是修改原来的migration而是新建migration的话直接php-artisan-migrate即可"><a href="#注意：如果不是修改原来的migration而是新建migration的话直接php-artisan-migrate即可" class="headerlink" title="注意：如果不是修改原来的migration而是新建migration的话直接php artisan migrate即可"></a>注意：如果不是修改原来的migration而是新建migration的话直接<code>php artisan migrate</code>即可</h5><h3 id="目录结构篇"><a href="#目录结构篇" class="headerlink" title="目录结构篇"></a>目录结构篇</h3><ol>
<li>目录结构一旦更改，本身以及引用此类的命名空间也必须进行<code>全局替换</code>！！</li>
</ol>
<h3 id="命名空间篇"><a href="#命名空间篇" class="headerlink" title="命名空间篇"></a>命名空间篇</h3><ol>
<li>很多的<code>Class couldn&#39;t find</code>这类的错误都是没有写<code>use</code>进行引用就直接用了</li>
</ol>
<h3 id="路由篇"><a href="#路由篇" class="headerlink" title="路由篇"></a>路由篇</h3><ol>
<li>决定统一用REST过后最好用<code>resource</code>一次搞定</li>
</ol>
<h3 id="用户登录篇-Auth"><a href="#用户登录篇-Auth" class="headerlink" title="用户登录篇 Auth"></a>用户登录篇 Auth</h3><ol>
<li><p>引用的时候必须写成 </p>
<pre class=" language-php"><code class="language-php"> <span class="token keyword">use</span> <span class="token package">Auth</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>所有路由都要加上<code>-&gt;name(&#39;_name_&#39;)</code>，不然<code>&amp;#123;&amp;#123; route(&#39;name) &amp;#125;&amp;#125;</code>用不了</p>
</li>
</ol>
<h3 id="表单篇-RESTful"><a href="#表单篇-RESTful" class="headerlink" title="表单篇 RESTful"></a>表单篇 RESTful</h3><ol>
<li>用户的退出登录可以看成是提交一个DELETE表单</li>
<li>表单要加上<code>{&amp;#123;&amp;#123; csrf_field() &amp;#125;&amp;#125;</code>生成令牌token</li>
<li>需要伪装的协议必须加上<code>&amp;#123;&amp;#123; method_field(&#39;PATCH&#39;) &amp;#125;&amp;#125;</code>或<code>&amp;#123;&amp;#123; method_field(&#39;DELETE&#39;) &amp;#125;&amp;#125;</code></li>
</ol>
<h3 id="数据绑定视图"><a href="#数据绑定视图" class="headerlink" title="数据绑定视图"></a>数据绑定视图</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'users.edit'</span><span class="token punctuation">,</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//用compact将user实例数据与视图进行绑定</span>
</code></pre>
<h4 id="注意compact的参数是字符串！！！"><a href="#注意compact的参数是字符串！！！" class="headerlink" title="注意compact的参数是字符串！！！"></a>注意compact的参数是字符串！！！</h4><p>用户数据与视图进行绑定后，便可以在视图上通过 <code>$user</code> 来访问用户对象</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel学习笔记]]></title>
      <url>http://tecknight.xyz/2017/02/03/Laravel%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h3><ul>
<li>compact(‘变量1’,’变量2’)    </li>
</ul>
<p>类似于es6 的简写，会生成类似于<code>[&#39;name&#39; =&gt; $name]</code>的键值对</p>
<ul>
<li>dd(变量)</li>
</ul>
<p>程序运行到此处终止并输出变量的值</p>
<ul>
<li>Tinker 助手</li>
</ul>
<pre class=" language-bash"><code class="language-bash">php artisan tinker
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> App\Model::pluck<span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
//只取出此字段
<span class="token operator">>></span><span class="token operator">></span> App\Model::where<span class="token punctuation">(</span><span class="token string">'id'</span>, <span class="token string">'>='</span>, 2<span class="token punctuation">)</span>-<span class="token operator">></span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">>></span><span class="token operator">></span> App\Model::all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">>></span><span class="token operator">></span> App\Model::first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li><code>request()-&gt;all()</code></li>
<li><code>request([&#39;title&#39;, &#39;body&#39;])</code></li>
</ul>
<p>获取所有的post数据</p>
<p>只获取title和body</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul>
<li>删除文件<br>删除完<code>migration</code>文件之后都要清除Composer中自动加载的记录，刷新自动加载记录</li>
</ul>
<pre class=" language-bash"><code class="language-bash">$ composer dump-autoload
</code></pre>
<h3 id="技巧提点"><a href="#技巧提点" class="headerlink" title="技巧提点"></a>技巧提点</h3><ul>
<li>进一步封装查询语句</li>
</ul>
<p>Model.php</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">scopeIncompleted</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$val</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'completed'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//将查询语句进行封装，调用时相当于静态方法</span>
    <span class="token comment" spellcheck="true">//Model::incompleted();</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>Model与路由的绑定</li>
</ul>
<pre class=" language-php"><code class="language-php">    Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/tasks/{thetask}'</span><span class="token punctuation">,</span> <span class="token string">'TasksController@show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span>Task <span class="token variable">$thetask</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'tasks.show'</span><span class="token punctuation">,</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string">'thetask'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//路由中括号内的参数名必须与Controller中的接收参数的变量名字一致，类型是Model对象</span>
</code></pre>
<ul>
<li>命名规则</li>
</ul>
<p>controller =&gt; PostsController<br>Model =&gt; Post<br>migration =&gt; create_posts_table</p>
<ul>
<li>RESTFul</li>
</ul>
<pre class=" language-bash"><code class="language-bash">$ php artisan make:Controller TasksController -r
</code></pre>
<p>创建一个resourceful controller</p>
<ul>
<li>文件路径更改</li>
</ul>
<p>与其相关的命名空间，包括文件本身的命名空间都需要进行修改！</p>
<ul>
<li>快速查看所有的路由</li>
</ul>
<pre class=" language-bash"><code class="language-bash">$ php artisan route:list
</code></pre>
<ul>
<li>重定向返回至上一次请求尝试访问的页面</li>
</ul>
<pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">intended</span><span class="token punctuation">(</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'users.show'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Auth<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="关于Blade"><a href="#关于Blade" class="headerlink" title="关于Blade"></a>关于Blade</h3><figcaption>&#39;Sample&#39;)</code></p></figcaption><pre class=" language-@yield(&#39;title&#39;,"><code class="language-@yield(&#39;title&#39;,"><p>声明title变量及其默认值</p>
<pre><code>@yield('content')
// content区域

@extends('layouts.default')
@section('content')
// 内容将会被插入布局模板中
@stop
</code></pre><p><code>@yield</code> 用于定义</p>
<p><code>@section</code> 用于插入值</p>
<p><code>@include(&#39;shared.user_info&#39;, [&#39;user&#39; =&gt; $user])</code></p>
<p>给局部视图传参数</p>
<p><code>old(&#39;name名称&#39;)</code></p>
<p>辅助函数显示旧的输入数据</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul>
<li>每一个Model内部都有三个属性</li>
</ul>
<p><code>$table</code> <code>$fillable</code> <code>$hidden</code></p>
<p>指明交互的数据表名称，能进行更新的字段，JSON形式显示时隐藏的字段</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul>
<li>每一个controller中都有一个<code>validator</code>，可以用来验证字段</li>
</ul>
<h3 id="Session-会话"><a href="#Session-会话" class="headerlink" title="Session 会话"></a>Session 会话</h3><ol>
<li>创建会话实例</li>
</ol>
<p><code>session()-&gt;flash(&#39;success&#39;, &#39;欢迎，您将在这里开启一段新的旅程~&#39;);</code></p>
<p>flash方法使得会话缓存只在下一次请求中有效，第一个参数是键名，第二个参数是键值</p>
<ol>
<li>访问会话实例</li>
</ol>
<p><code>session()-&gt;get(&#39;success&#39;)</code></p>
<h3 id="Auth-认证系统"><a href="#Auth-认证系统" class="headerlink" title="Auth 认证系统"></a>Auth 认证系统</h3><p><code>Auth::attempt()</code>尝试登陆</p>
<p><code>Auth::user()</code>当前登录实例</p>
<p><code>Auth::check()</code> 是否已经登录</p>
<p>API:</p>
<p><code>bool attempt(array $credentials = array(), bool $remember = false)</code></pre>
<p>第二个参数用来开发记住密码</p>
<h3 id="中间件的使用"><a href="#中间件的使用" class="headerlink" title="中间件的使用"></a>中间件的使用</h3><ul>
<li>在用户控制器构造方法中应用中间件</li>
</ul>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            
            <span class="token string">'only'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'edit'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<ul>
<li><code>Authenticate.php</code>中进行重定向</li>
</ul>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token string">'Unauthorized.'</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">guest</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="授权策略"><a href="#授权策略" class="headerlink" title="授权策略"></a>授权策略</h3><p>已登录的用户之间的权限控制</p>
<ul>
<li>创建Policy文件并创建用户比对方法</li>
</ul>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>User <span class="token variable">$currentUser</span><span class="token punctuation">,</span> User <span class="token variable">$user</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$currentUser</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span> <span class="token operator">===</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<ul>
<li>在<code>AuthServiceProvider</code>中进行授权策略的配置，将用户模型指定授权策略</li>
</ul>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">protected</span> <span class="token variable">$policies</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">'App\Model'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'App\Policies\ModelPolicy'</span><span class="token punctuation">,</span>
        User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span> <span class="token operator">=</span><span class="token operator">></span> UserPolicy<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span>
        <span class="token comment" spellcheck="true">//全路径匹配</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>将查询时返回的User实例发送给授权策略进行比较</li>
</ul>
<pre class=" language-php"><code class="language-php">   <span class="token variable">$user</span> <span class="token operator">=</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">authorize</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 5 常用帮助函数]]></title>
      <url>http://tecknight.xyz/2017/02/03/Laravel%205%20%E5%B8%B8%E7%94%A8%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-app-用于快速生成对应命名空间下的类的实例"><a href="#1-app-用于快速生成对应命名空间下的类的实例" class="headerlink" title="1.app() 用于快速生成对应命名空间下的类的实例"></a>1.app() 用于快速生成对应命名空间下的类的实例</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span>Faker\<span class="token package">Generator</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//生成了一个Faker的生成器实例</span>
</code></pre>
<h3 id="2-str-random-用于快速生成限定范围内的随机字符串"><a href="#2-str-random-用于快速生成限定范围内的随机字符串" class="headerlink" title="2.str_random() 用于快速生成限定范围内的随机字符串"></a>2.str_random() 用于快速生成限定范围内的随机字符串</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">str_random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//生成10位随机密码</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue 学习总结]]></title>
      <url>http://tecknight.xyz/2017/01/25/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>##将数据渲染进DOM元素</p>
<ol>
<li>&#123;&#123;message&#125;&#125;</li>
<li>v-bind:属性= (也可写作 :属性=)</li>
</ol>
<p>##常用语句<br>判断  <code>v-if</code></p>
<p>循环  <code>v-for=&quot;todo in todos&quot;</code></p>
<p>按钮 <code>v-on:click=&quot;函数名&quot;</code> (也可写作 @click=)</p>
<p>表单数据和应用数据双向绑定 <code>v-model=&quot;数据名&quot;</code></p>
<p>##组件</p>
<pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// The todo-item component now accepts a</span>
  <span class="token comment" spellcheck="true">// "prop", which is like a custom attribute. </span>
  <span class="token comment" spellcheck="true">// This prop is called todo. </span>
  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
  template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{ todo.text }}&lt;/li>'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><p>props作为子组件的接口，接收父类的数据，同时解耦</p>
</li>
<li><p>组件可以作为自定义标签在HTML中使用</p>
</li>
<li><p>所有的 Vue.js 组件其实都是被扩展的 Vue 实例</p>
</li>
</ul>
<p>实质上是一个预定义的Vue实例，在实例app中，app相当于父类，而组件相当于是app中的子类，父类的数据可以通过<code>v-bind:字段名</code><br>的方式将父类作用域中的数据传入子类组件中</p>
<p>####用Vue创建的应用的大致结构</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-nav</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-view</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-sidebar</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-sidebar</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-content</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>###创建实例</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 选项</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>传入的选项对象包括：</p>
<ul>
<li><p>数据</p>
</li>
<li><p>模板</p>
</li>
<li><p>挂载元素</p>
</li>
<li><p>方法</p>
</li>
<li><p>生命周期钩子</p>
</li>
</ul>
<p>###属性和方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> data
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//vm.a === data.a</span>
vm<span class="token punctuation">.</span>$data <span class="token operator">===</span> data <span class="token comment" spellcheck="true">// -> true</span>
vm<span class="token punctuation">.</span>$el <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -> true</span>
<span class="token comment" spellcheck="true">// $watch 是一个实例方法</span>
vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 这个回调将在 vm.a  改变后调用</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>#####注意：</p>
<ul>
<li><p>所有代理的属性都是响应的，添加新的属性时不会触发视图的更新</p>
</li>
<li><p>钩子的<code>this</code>代表着调用它的实例</p>
</li>
</ul>
<p>###插值</p>
<p>####文本</p>
<ol>
<li><p>用双大括号<code>&amp;#123;&amp;#123;数据对象 &amp;#124; 过滤器&amp;#125;&amp;#125;</code></p>
<p> 注意：</p>
<p> 双大括号中也可以是JS表达式可对数据进行运算</p>
<p> 渲染结果解释为纯文本</p>
<p> 若要输出HTML，需要在div中设置</p>
<p> <code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code></p>
</li>
</ol>
<p>##计算属性<br>用于将复杂的数据运算包含于实例的初始化中</p>
<p>作为其中一个选项对象：</p>
<pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// a computed getter</span>
    reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// this points to the vm instance</span>
      <span class="token keyword">return</span>            
      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>reversedMessage作为计算过后的新属性，直接用双大括号进行解释即可得到计算的最终结果</p>
<p>####计算缓存与Method的区别<br>好处：当数据的值不改变的时候，依然会使用计算缓存而无需像调用Method那样重新计算<br>前提：计算缓存的使用必须要基于相关依赖，像Date.now()就不行</p>
<p>####计算缓存与$watch</p>
<p>在数据变动时，可以优先考虑用计算缓存，而并非watch回调</p>
<p>注意:计算属性默认为getter，也可设置为setter,setter在内部赋值的时候会被调用</p>
<hr>
<p>##观察者 Watchers</p>
<p>当数据值变动时，相对于计算属性，更加的通用，执行异步操作(ajax访问API)或需要响应不断变化昂贵的数据操作时这很有用,例如限制访问API的频率</p>
<p>##Class 与 Style绑定</p>
<p>###绑定HTML Class<br>语法：<code>v-bind:class={class1:布尔变量,class2...}</code></p>
<p>class还可以是数据对象,甚至是计算属性！</p>
<p>#####通过控制布尔变量可以使元素的class动态切换</p>
<figcaption>v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;</code></p></figcaption><pre class=" language-&lt;div"><code class="language-&lt;div"><p>###绑定内联样式</p>
<p><code>v-bind:style="{ color: mycolor}"</code> mycolor在data中定义</p>
<p>复杂内联样式推荐绑定styleObject对象</p>
<pre><code class="javascript">data: {
  styleObject: {
    color: 'red',
    fontSize: '13px'
  }
}
</code></pre>
<p>##条件渲染<br>判断一个标签的输出 <code>v-if=&quot;ok&quot;</code> ok值决定是否显示</p>
<p>判断一块标签的显示 用template元素作为包装元素，下面为根据需要显示的标签块</p>
<p><code>v-else</code>可以和<code>v-if</code>和<code>v-show</code>一起使用</p>
<p><code>v-show</code>专门用于对渲染元素的CSS属性，且不支持<code>&lt;template&gt;</code>标签</p>
<p>####v-if 和 v-show比较</p>
<p>频繁切换使用的用v-show,条件不大可能改变的v-if</p>
<p>##列表渲染</p>
<p><code>&lt;template v-for=&quot;&quot;&gt;</code></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, key, index) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  {{ index }}. {{ key }} : {{ value }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>index索引，key键，value值</p>
<p>##key(未完)</p>
<p>作用：让Vue标识出节点的身份，检测数组元素的突变<br>用法：v-bind:key=”item.id”</p>
<p>##数组更新检测</p>
<p>变异方法：一组用来观察数组的方法，可以触发视图更新</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<p>非变异方法：不会改变原始数组的数据，但是会返回新的数组，适用于不想改变原值的情况</p>
<ul>
<li>filter()</li>
<li>concat()</li>
<li>slice()</li>
</ul>
<p>##事件处理器</p>
<p>###监听事件</p>
<p><code>v-on:</code>指令，例如点击<code>v-on:click=&quot;触发方法名&quot;</code></p>
<p>###内联事件处理<br><code>&lt;button v-on:click=&quot;say(&#39;hi&#39;)&quot;&gt;Say hi&lt;/button&gt;</code><br>say方法名(传入的参数)</p>
<p>如果要访问DOM原生对象,传入的参数要有 特殊符号美元+event</p>
<p>###事件修饰符<br>添加在click和submit后</p>
<ul>
<li>.stop</li>
<li>.prevent</li>
<li>.capture</li>
<li>.self</li>
</ul>
<p>###按键修饰符<br><code>&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</code><br>13表示键值，该按键按下后会触发submit</p>
<p><code>&lt;input @keyup.enter=&quot;submit&quot;&gt;</code></p>
<p>达到直接在HTML中监听事件的效果</p>
<p>##表单控件绑定<br>略</p>
<p>##组件</p>
<p>###注册全局组件</p>
<p><code>Vue.component(&#39;my-component&#39;, {
  选项
})</code>  父组件<br>``</p>
<p>必须先注册组件，然后再初始化父实例，才能在父实例中使用组件自定义标签</p>
<p>###注册局部组件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>A custom component!&lt;/div>'</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// &lt;my-component> 将只在父模板可用</span>
    <span class="token string">'my-component'</span><span class="token punctuation">:</span> Child
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>子组件</p>
<p>###data</p>
<p>注意：组件的data必须是函数！通过return的方式将data传入组件绑定的元素中</p>
<p>意义：类似接口解耦，使得同一个data在不同的组件中都能有自己不同的状态！</p>
<p>###传递数据<br>父–&gt;子 props:[‘字段名’]</p>
<p>动态绑定 <code>v-bind:字段名=&quot;父数据名&quot;</code><br><code>&lt;child v-bind:my-message=&quot;parentMsg&quot;&gt;&lt;/child&gt;</code></pre>
<p>###props验证</p>
<pre class=" language-javascript"><code class="language-javascript">propB<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 必须且是字符串</span>
    propC<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>
      required<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 数字，有默认值</span>
    propD<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">100</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 数组／对象的默认值应当由一个工厂函数返回</span>
</code></pre>
<p>###组件v-model数据双向绑定<br>表单自定义绑定：</p>
<p>1.绑定value</p>
<p>2.有新的value时触发input事件</p>
<p>###非父子组件的通信<br>须使用一个空vue实例来当中央</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 触发组件 A 中的事件</span>
bus<span class="token punctuation">.</span><span class="token function">美元emit</span><span class="token punctuation">(</span><span class="token string">'id-selected'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 在组件 B 创建的钩子中监听事件</span>
bus<span class="token punctuation">.</span><span class="token function">美on</span><span class="token punctuation">(</span><span class="token string">'id-selected'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>###内容分发</p>
<p>绑定子组件内的指令到一个组件的根节点，必须在子组件的内部定义模板时进行绑定</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is some original content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is some more original content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>
</code></pre>
<p>在父模板中放入子组件的标签，其中的内容将会被安插到子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签中</p>
<p>slot=”名称”  可以定义名字以标识父插入子的何处</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sass之CSS模块化]]></title>
      <url>http://tecknight.xyz/2016/12/03/Sass%E4%B9%8BCSS%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>一般在项目目录中我们会建一个sass文件夹，内容一般为partials文件夹还有一个app.scss文件，partials文件夹存放我们的CSS模块，app.scss中进行import</p>
<p><code>@import &#39;partials/temp;&#39;</code></p>
<p>partials文件夹中的模块scss文件最前面必须加上下划线 _</p>
<p>使得sass在监听并编译成css的时候能够将模块编译到一起而不是生成多个css文件</p>
<h2 id="CSS模块常用目录结构"><a href="#CSS模块常用目录结构" class="headerlink" title="CSS模块常用目录结构"></a>CSS模块常用目录结构</h2><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><ol>
<li>base    基本样式<ul>
<li>variable 变量</li>
<li>typography</li>
<li>base 例如:wrapper居中CSS</li>
</ul>
</li>
<li>layout        布局<ul>
<li>nav    </li>
<li>hero        </li>
<li>footer    </li>
<li>layout</li>
</ul>
</li>
<li>component    组件<ul>
<li>button </li>
<li>schedule</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> Sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sass语法点总结]]></title>
      <url>http://tecknight.xyz/2016/12/03/Sass%E8%AF%AD%E6%B3%95%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="类似PHP，Sass提供了一种类似PHP的感觉，声明变量的方式与PHP相同，赋值方式则与CSS类似-变量名：值"><a href="#类似PHP，Sass提供了一种类似PHP的感觉，声明变量的方式与PHP相同，赋值方式则与CSS类似-变量名：值" class="headerlink" title="类似PHP，Sass提供了一种类似PHP的感觉，声明变量的方式与PHP相同，赋值方式则与CSS类似$变量名：值;"></a>类似PHP，Sass提供了一种类似PHP的感觉，声明变量的方式与PHP相同，赋值方式则与CSS类似<code>$变量名：值;</code></h4><h3 id="常用关键词"><a href="#常用关键词" class="headerlink" title="常用关键词"></a>常用关键词</h3><ol>
<li><p>@import</p>
<p> 引入sass模块</p>
</li>
<li><p>@include</p>
<p> 引入mixin函数</p>
</li>
<li><p>@mixin</p>
<p> 声明函数 </p>
</li>
<li><p>@extends</p>
<p> 继承某CSS类的样式(存在问题，尽量不使用)</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> Sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php数组常用方法详解]]></title>
      <url>http://tecknight.xyz/2016/11/27/php%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="众所周知，php的数组可谓是相当强大，很大一部分原因是其数组的方法非常的多而且都非常好用，下面将介绍一些非常实用的数组方法"><a href="#众所周知，php的数组可谓是相当强大，很大一部分原因是其数组的方法非常的多而且都非常好用，下面将介绍一些非常实用的数组方法" class="headerlink" title="众所周知，php的数组可谓是相当强大，很大一部分原因是其数组的方法非常的多而且都非常好用，下面将介绍一些非常实用的数组方法"></a>众所周知，php的数组可谓是相当强大，很大一部分原因是其数组的方法非常的多而且都非常好用，下面将介绍一些非常实用的数组方法</h4><h4 id="我们先建立一个对象post以便于演示"><a href="#我们先建立一个对象post以便于演示" class="headerlink" title="我们先建立一个对象post以便于演示"></a>我们先建立一个对象post以便于演示</h4><a id="more"></a>
<pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Post</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$title</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$published</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$auth</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span><span class="token variable">$auth</span><span class="token punctuation">,</span><span class="token variable">$published</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$title</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">published</span> <span class="token operator">=</span> <span class="token variable">$published</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span> <span class="token operator">=</span> <span class="token variable">$auth</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'jm'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token string">'vm'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token string">'third'</span><span class="token punctuation">,</span><span class="token string">'cm'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token string">'fourth'</span><span class="token punctuation">,</span><span class="token string">'em'</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>

<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<ol>
<li><code>array_filter</code> 数组过滤器</li>
</ol>
<p>可以写成闭包的形式，那样当数组被遍历的时候每一个元素就会执行该方法，将符合条件的元素return回来，然后就组成了新的数组,如果键的值为空，那么这个键将不会被保存在<br>新的数组里</p>
<p>例如我们想筛选出还没有发布的post对象，并用var_dump()输出结果，我们可以</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$unpublished</span> <span class="token operator">=</span> <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$posts</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$post</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">published</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>输出的结果为</p>
<pre class=" language-shell"><code class="language-shell">array(1) {
  [3]=>
  object(Post)#4 (3) {
    ["title"]=>
    string(6) "fourth"
    ["published"]=>
    bool(false)
    ["auth"]=>
    string(2) "em"
  }
}
</code></pre>
<ol>
<li><code>array_map</code> 数组元素批处理器</li>
</ol>
<p>这个方法可就相当好用了，尤其适用于要同时改变多个对象中的属性时</p>
<p>假设我们要把post对象的published属性全部设置成false，可以这样做</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$modified</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$post</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">published</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$post</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token variable">$posts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//与普通的闭包函数的位置有些许不同，闭包函数在前，要处理的数组在后</span>
</code></pre>
<p>再次用var_dump输出结果</p>
<pre class=" language-shell"><code class="language-shell">array(4) {
  [0]=>
  object(Post)#1 (3) {
    ["title"]=>
    string(5) "first"
    ["published"]=>
    bool(false)
    ["auth"]=>
    string(2) "jm"
  }
  [1]=>
  object(Post)#2 (3) {
    ["title"]=>
    string(6) "second"
    ["published"]=>
    bool(false)
    ["auth"]=>
    string(2) "vm"
  }
  [2]=>
  object(Post)#3 (3) {
    ["title"]=>
    string(5) "third"
    ["published"]=>
    bool(false)
    ["auth"]=>
    string(2) "cm"
  }
  [3]=>
  object(Post)#4 (3) {
    ["title"]=>
    string(6) "fourth"
    ["published"]=>
    bool(false)
    ["auth"]=>
    string(2) "em"
  }
}
</code></pre>
<p>神奇得发现published属性全都变成了false!</p>
<ol>
<li>array_column 返回此键名的值所构成的新数组</li>
</ol>
<p>假设我们要返回全部的作者名</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$allAuth</span> <span class="token operator">=</span> <span class="token function">array_column</span><span class="token punctuation">(</span><span class="token variable">$posts</span><span class="token punctuation">,</span><span class="token string">'auth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-shell"><code class="language-shell">array(4) {
  [0]=>
  string(2) "jm"
  [1]=>
  string(2) "vm"
  [2]=>
  string(2) "cm"
  [3]=>
  string(2) "em"
}
</code></pre>
<p>以上就是三个非常实用的PHP数组的方法</p>
<p>附：</p>
<ul>
<li><p>array_key_exists 判断在一个数组中是否存在这个键名</p>
</li>
<li><p>array_merge 合并两个数组,返回合并后的新数组</p>
</li>
<li><p>array_pop 将最后一个元素去除</p>
</li>
<li><p>array_push 在尾部追加新的元素</p>
</li>
<li><p>shuffle 打乱一个数组</p>
</li>
<li><p>array_rand 在数组中随机挑选几个元素，返回这些元素的键名</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp.js简易入门指南]]></title>
      <url>http://tecknight.xyz/2016/11/20/gulp-js%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h4 id="gulp简单来讲，是一个基于流的自动化构建工具，听起来有点奇怪，但是简单理解就是前端工程化工具，它的出现使得我们能够将一些操作或者处理工作直接交给工具去做，充分提高了开发的效率，基于流的意思是通过数据流的方式读取，处理然后再输出到文件"><a href="#gulp简单来讲，是一个基于流的自动化构建工具，听起来有点奇怪，但是简单理解就是前端工程化工具，它的出现使得我们能够将一些操作或者处理工作直接交给工具去做，充分提高了开发的效率，基于流的意思是通过数据流的方式读取，处理然后再输出到文件" class="headerlink" title="gulp简单来讲，是一个基于流的自动化构建工具，听起来有点奇怪，但是简单理解就是前端工程化工具，它的出现使得我们能够将一些操作或者处理工作直接交给工具去做，充分提高了开发的效率，基于流的意思是通过数据流的方式读取，处理然后再输出到文件"></a>gulp简单来讲，是一个基于流的自动化构建工具，听起来有点奇怪，但是简单理解就是前端工程化工具，它的出现使得我们能够将一些操作或者处理工作直接交给工具去做，充分提高了开发的效率，基于流的意思是通过数据流的方式读取，处理然后再输出到文件</h4><a id="more"></a>
<p>为什么需要gulp?</p>
<ul>
<li>模块化我们的html,css,js文件，使得项目的结构更加的清晰</li>
<li>转译我们的模块文件（例如：js es6-&gt;es5 , panini-&gt;html ,Sass-&gt;css,）</li>
<li>图片及css文件的压缩处理极大的提高网页性能</li>
<li>解决各种浏览器兼容性问题</li>
<li>基于管道思想的pipe多重处理，你可以自定义你想要的处理任务，一切交给gulp自动完成</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>必备：npm包管理器</p>
<p>流程：</p>
<ol>
<li><p>在项目目录下进行 npm init -y</p>
</li>
<li><p>npm install gulp –save-dev 作为项目依赖安装</p>
</li>
<li><p>项目根目录下新建文件gulpfile.js</p>
</li>
<li><p>在gulpfile.js中写入你要gulp为你自动化处理的任务</p>
</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//请求gulp模块</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//给gulp的任务，任务名+任务会执行的函数</span>
    <span class="token comment" spellcheck="true">//执行的任务</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>命令行中执行gulp name的时候，gulp就会自动找到你自己定义的那个任务</p>
<h3 id="gulp能做得更多"><a href="#gulp能做得更多" class="headerlink" title="gulp能做得更多"></a>gulp能做得更多</h3><h4 id="管道理念"><a href="#管道理念" class="headerlink" title="管道理念"></a>管道理念</h4><p>简单来讲，你的任务一定会有源文件，管道相当于处理方法，管道可以接多条，管道的尽头就是输出文件</p>
<p>我们有专门的文件夹来存放我们的源文件和输出文件，它们的目录分别为src和dist</p>
<p>gulp本身也给我们提供了很多现成的管道，官网有许多的plugin可以用，上面都有示例代码</p>
<p>我们可以用npm像安装模块一样把它们一一安装，在node中一切皆模块，npm可以快速的帮助我们运用这些已经写好的模块作为我们的一个个管道</p>
<h4 id="gulp管道的使用方法"><a href="#gulp管道的使用方法" class="headerlink" title="gulp管道的使用方法"></a>gulp管道的使用方法</h4><p>这里以sass编译任务为例：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-sass'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//完整的模块名,请求模块</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'sass'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//注意node支持es6的语法</span>
    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/源文件目录.sass'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//告诉gulp我们想要处理的文件</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//将sass处理方法封装成管道</span>
        <span class="token comment" spellcheck="true">//.pipe 处理1</span>
        <span class="token comment" spellcheck="true">//.pipe 处理2</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//最后将管道导向输出，也就是输出目录当中生成输出文件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="添加gulp观察者以便对源文件的更改进行实时处理"><a href="#添加gulp观察者以便对源文件的更改进行实时处理" class="headerlink" title="添加gulp观察者以便对源文件的更改进行实时处理"></a>添加gulp观察者以便对源文件的更改进行实时处理</h4><pre class=" language-javascript"><code class="language-javascript">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'watch'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'追踪更改的文件目录'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'每次更改保存就执行的task'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4><ul>
<li>任务名若为default命令行中直接输入gulp就会立即执行</li>
<li>gulp.task(‘default’, [‘styles’, ‘jshint’, ‘watch’])</li>
</ul>
<p>gulp可以进行多任务,让一个任务同时调用多个任务</p>
<ul>
<li>在指定目录中可以用*号和后缀匹配目录下的全部同类型文件 </li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'js/**/*.js'</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> BuildingTools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> cli </tag>
            
            <tag> front end dev </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php处理html字符串]]></title>
      <url>http://tecknight.xyz/2016/11/12/php%E5%A4%84%E7%90%86html%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h4 id="在开发APP接口的时候，我们经常需要将html富文本字符串进行处理，PHP中自带了许多有用的函数来给我们进行使用"><a href="#在开发APP接口的时候，我们经常需要将html富文本字符串进行处理，PHP中自带了许多有用的函数来给我们进行使用" class="headerlink" title="在开发APP接口的时候，我们经常需要将html富文本字符串进行处理，PHP中自带了许多有用的函数来给我们进行使用"></a>在开发APP接口的时候，我们经常需要将html富文本字符串进行处理，PHP中自带了许多有用的函数来给我们进行使用</h4><h3 id="需要用到的函数："><a href="#需要用到的函数：" class="headerlink" title="需要用到的函数："></a>需要用到的函数：</h3><ul>
<li>str_replace() 字符串替换</li>
<li>html_entity_decode() html字符串转html标签 </li>
<li>strip_tags() 除去所有html标签</li>
<li>preg_match_all() 全局正则匹配字符串</li>
<li>array_unique() 去除数组中重复的元素(用于解决全局正则匹配带来的元素重复的问题)</li>
<li>array_flip() 将键值交换，因为键名不能重复，所以重复元素会被去掉，两次flip下来就能够得到不重复的键值数组</li>
<li>array_values() 返回只有键值无键名的数组<a id="more"></a>
<h3 id="快速去除html字符"><a href="#快速去除html字符" class="headerlink" title="快速去除html字符"></a>快速去除html字符</h3></li>
</ul>
<pre class=" language-php"><code class="language-php"><span class="token variable">$bewrite</span> <span class="token operator">=</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token function">html_entity_decode</span><span class="token punctuation">(</span><span class="token variable">$htmlStr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>先转HTML标签再去除标签，但是注意保留换行标签，在APP中的文字依然需要简单地排版。<br>接着我们再把br标签再转成本地APP的\n</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$bewrite</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token variable">$bewrite</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>但似乎字符串还是没有除干净，因为会残余一些html本身的换行字符&amp;和空格,再替换一次</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$bewrite</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&amp;nbsp;'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token variable">$bewrite</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$bewrite</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&amp;amp;'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$bewrite</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>但通常情况下，我们的HTML字符串中不仅有文本，还有图片，img中的src属性也必须要挑出来</p>
<h3 id="正则匹配标签属性"><a href="#正则匹配标签属性" class="headerlink" title="正则匹配标签属性"></a>正则匹配标签属性</h3><p>下面我以img中匹配src图片地址为例子</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$unmatchedstr</span> <span class="token operator">=</span> <span class="token function">html_entity_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'secondgoods_bewrite'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转html字符串</span>
<span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/\&lt;img.*?src\=\"(.*?)\"[^>]*>/i'</span><span class="token punctuation">,</span><span class="token variable">$unmatchedstr</span><span class="token punctuation">,</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正则匹配图片src地址</span>
</code></pre>
<p>但这还没完，我们发现正则出来的链接有许多的重复的链接，我们必须要去除变量$match[1]中重复的值</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$matches</span> <span class="token operator">=</span> <span class="token function">array_unique</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//来两次array_flip()或许比unique更加高效一些</span>
<span class="token variable">$matchresult</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取键值数组的值，去掉键名就完成了</span>
</code></pre>
<p>附文：</p>
<p>对于远程的src地址，有一种特殊的正则匹配可以排除掉本地的图片</p>
<pre class=" language-php"><code class="language-php"><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/((http|https):\/\/)+(\w+\.)+(\w+)[\w\/\.\-]*(jpg|gif|png)/'</span><span class="token punctuation">,</span><span class="token variable">$unmatchedstr</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UNIX时间戳与time()算时间差]]></title>
      <url>http://tecknight.xyz/2016/11/05/UNIX%E6%97%B6%E9%97%B4%E6%88%B3%E4%B8%8Etime-%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
      <content type="html"><![CDATA[<p>在mysql查询中我们经常会遇到UNIX时间戳的转换还有计算经过时间的问题，下面的我的一种解决方案</p>
<h3 id="需要用到的函数"><a href="#需要用到的函数" class="headerlink" title="需要用到的函数"></a>需要用到的函数</h3><h4 id="getdate-unix数字时间戳"><a href="#getdate-unix数字时间戳" class="headerlink" title="getdate(unix数字时间戳)"></a>getdate(unix数字时间戳)</h4><p>将时间戳数字转化为键值数组，使得我们可以轻易地分离想要进行判断的时间<br><a id="more"></a></p>
<h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p>方便获取现在的时间</p>
<h4 id="现假设从mysql中获取到时间戳为-result"><a href="#现假设从mysql中获取到时间戳为-result" class="headerlink" title="现假设从mysql中获取到时间戳为$result"></a>现假设从mysql中获取到时间戳为$result</h4><pre class=" language-php"><code class="language-php">              <span class="token variable">$date_time_array</span> <span class="token operator">=</span> <span class="token function">getdate</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token variable">$hour</span> <span class="token operator">=</span> <span class="token variable">$date_time_array</span><span class="token punctuation">[</span><span class="token string">'hours'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$min</span> <span class="token operator">=</span> <span class="token variable">$date_time_array</span><span class="token punctuation">[</span><span class="token string">'minutes'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token variable">$date_time_array</span><span class="token punctuation">[</span><span class="token string">'seconds'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$month</span> <span class="token operator">=</span> <span class="token variable">$date_time_array</span><span class="token punctuation">[</span><span class="token string">'mon'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$day</span> <span class="token operator">=</span> <span class="token variable">$date_time_array</span><span class="token punctuation">[</span><span class="token string">'mday'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$year</span> <span class="token operator">=</span> <span class="token variable">$date_time_array</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$now_time_array</span> <span class="token operator">=</span> <span class="token function">getdate</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$year</span><span class="token operator">&lt;</span><span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$year</span><span class="token punctuation">;</span>
                <span class="token variable">$timediff</span> <span class="token operator">=</span> <span class="token variable">$diff</span><span class="token punctuation">.</span><span class="token string">'年前'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$month</span><span class="token operator">&lt;</span><span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'mon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'mon'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$month</span><span class="token punctuation">;</span>
                <span class="token variable">$timediff</span> <span class="token operator">=</span> <span class="token variable">$diff</span><span class="token punctuation">.</span><span class="token string">'月前'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$day</span><span class="token operator">&lt;</span><span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'mday'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'mday'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$day</span><span class="token punctuation">;</span>
                <span class="token variable">$timediff</span> <span class="token operator">=</span> <span class="token variable">$diff</span><span class="token punctuation">.</span><span class="token string">'天前'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$hour</span><span class="token operator">&lt;</span><span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'hours'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'hours'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$hour</span><span class="token punctuation">;</span>
                <span class="token variable">$timediff</span> <span class="token operator">=</span> <span class="token variable">$diff</span><span class="token punctuation">.</span><span class="token string">'小时前'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$min</span><span class="token operator">&lt;</span><span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'minutes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'minutes'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$min</span><span class="token punctuation">;</span>
                <span class="token variable">$timediff</span> <span class="token operator">=</span> <span class="token variable">$diff</span><span class="token punctuation">.</span><span class="token string">'分钟前'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$second</span><span class="token operator">&lt;</span><span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'seconds'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$now_time_array</span><span class="token punctuation">[</span><span class="token string">'seconds'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token variable">$second</span><span class="token punctuation">;</span>
                <span class="token variable">$timediff</span> <span class="token operator">=</span> <span class="token variable">$diff</span><span class="token punctuation">.</span><span class="token string">'秒前'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre>
<p>循环嵌套顺序判断年月日时分秒，找到第一个不同项相减，就能够计算出数据的距今时间</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithms </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TP常用函数总结]]></title>
      <url>http://tecknight.xyz/2016/11/04/TP%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="I函数"><a href="#I函数" class="headerlink" title="I函数"></a>I函数</h3><p>用途：获取输入数据，例如表单的接收，API的GET接收参数</p>
<p>定义: <code>I(&#39;接收的数据&#39;，&#39;默认值&#39;,&#39;接收数据的类型&#39;)</code></p>
<p>用法：<code>I(&#39;get.id&#39;,1,&#39;int&#39;)</code><br><a id="more"></a><br>好处：自动过滤输入，增加安全性，官方推荐</p>
<h3 id="D函数"><a href="#D函数" class="headerlink" title="D函数"></a>D函数</h3><p>用途：new出Model对象进行数据的增删改查，而且可以调用Model中的业务逻辑</p>
<p>定义：<code>D(&#39;Model名&#39;)</code></p>
<h3 id="M函数"><a href="#M函数" class="headerlink" title="M函数"></a>M函数</h3><p>用途：可对Model对应的表进行基本的CURD操作，而且节约资源</p>
<p>定义: <code>M(&#39;Model名&#39;)</code></p>
<p>缺点：不能调用Model中的自定义业务逻辑</p>
<h3 id="U函数"><a href="#U函数" class="headerlink" title="U函数"></a>U函数</h3><p>用途：动态生成URL，是官方推荐的URL生成方式</p>
<p>定义：<code>U(&#39;模块/控制器/操作&#39;)</code></p>
<h3 id="E函数"><a href="#E函数" class="headerlink" title="E函数"></a>E函数</h3><p>用途：用于错误调试，可以输出错误信息并中断操作</p>
<p>用法：<code>E($msg)</code></p>
<h3 id="F函数"><a href="#F函数" class="headerlink" title="F函数"></a>F函数</h3><p>用途：建立快速缓存，为存储的数据带来更快的操作</p>
<p>缓存Data：<code>F(&#39;data&#39;,$Data,保存目录(可选))</code></p>
<p>获取：<code>F(&#39;data&#39;)</code></p>
<p>删除: <code>F(&#39;data&#39;, NULL)</code></p>
<p>查询缓存: <code>$Model-&gt;cache(&#39;data&#39;)-&gt;select()</code></p>
<h3 id="S函数"><a href="#S函数" class="headerlink" title="S函数"></a>S函数</h3><p>外部获取缓存内容：<code>$value = S(&#39;cache_name&#39;)</code></p>
<h3 id="T函数"><a href="#T函数" class="headerlink" title="T函数"></a>T函数</h3><p>专门用于获取模板的地址，用于display()中</p>
<p>定义: <code>T(模块/主题/控制器/操作,视图分层)</code></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[夹杂数字字母大小写的字符串按字典排序方法]]></title>
      <url>http://tecknight.xyz/2016/11/04/%E5%A4%B9%E6%9D%82%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="核心步骤概要"><a href="#核心步骤概要" class="headerlink" title="核心步骤概要"></a>核心步骤概要</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤数字等特殊符号，只剩下字母</p>
<p>这里要用到String类自带的replaceAll方法以及表达式进行过滤</p>
<h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>将字符串进行单字符分割<br><a id="more"></a><br>这里要用到String类自带的substring方法</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>将分割得到的单字符String数组进行忽略大小写的排序</p>
<p>这里要用到Arrays类中的sort方法</p>
<h2 id="关键代码演示"><a href="#关键代码演示" class="headerlink" title="关键代码演示"></a>关键代码演示</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>因为输入的行数和字符串内容任意，所以将每行的字符串直接add入Java的ArrayList动态数组中，接着再装入用length初始化的String字符串数组newArray中，从而避免了从Object类型进行强制转换String[]的风险</p>
<hr>
<h3 id="字符串过滤演示"><a href="#字符串过滤演示" class="headerlink" title="字符串过滤演示"></a>字符串过滤演示</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>elementIndex<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//这里演示的是去除数字</span>
</code></pre>
<p><strong>拓展：</strong></p>
<p>.replaceAll(“转义符+正则表达式”,”要替换成的字符”);</p>
<h3 id="字符串分割演示"><a href="#字符串分割演示" class="headerlink" title="字符串分割演示"></a>字符串分割演示</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>newArray<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
sortArray<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> newArray<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//用一个for循环一次切割一个字符并添加入sortArray中</span>
</code></pre>
<p><strong>拓展：</strong></p>
<h4 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h4><table>
<thead>
<tr>
<th>方法用途</th>
<th>定义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>起止字符分割字符串</td>
<td>substring(int beginIndex,int endIndex)</td>
</tr>
<tr>
<td>将某字符用作分隔符</td>
<td>split(String regex) return String[]</td>
</tr>
<tr>
<td>转成大写字母</td>
<td>toUpperCase()</td>
</tr>
<tr>
<td>转成小写字母</td>
<td>toLowerCase()</td>
</tr>
<tr>
<td>去掉开始和末尾的空格</td>
<td>trim() return a string </td>
</tr>
<tr>
<td>比较字符串</td>
<td>boolean equals(Object anObject)</td>
</tr>
</tbody>
</table>
<h3 id="单字符String数组排序演示"><a href="#单字符String数组排序演示" class="headerlink" title="单字符String数组排序演示"></a>单字符String数组排序演示</h3><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span>String<span class="token punctuation">.</span>CASE_INSENSITIVE_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//不分大小写进行排序</span>
</code></pre>
<p><strong>拓展：</strong></p>
<h4 id="Arrays类常用方法"><a href="#Arrays类常用方法" class="headerlink" title="Arrays类常用方法"></a>Arrays类常用方法</h4><table>
<thead>
<tr>
<th>方法用途</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>将数组排序</td>
<td>sort()</td>
</tr>
<tr>
<td>查找数组中的值</td>
<td>binarySearch(object[ ], object key) *先用sort()排序后用</td>
</tr>
<tr>
<td>复制数组</td>
<td>int[] copyOf(int[] original,int newLength)</td>
</tr>
<tr>
<td>数组中值的替换</td>
<td>fill(int[] a,int val)</td>
</tr>
<tr>
<td>待续….</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="完整代码demo演示"><a href="#完整代码demo演示" class="headerlink" title="完整代码demo演示"></a>完整代码demo演示</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Created by Tecker on 2016/6/21.
 */</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsingArrayList</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> elementIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Scanner inputElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ArrayList elementlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> inputOver <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请任意输入N行N个字符串\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当输入inputOver时结束\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入第"</span> <span class="token operator">+</span> elementIndex <span class="token operator">+</span> <span class="token string">"个字符串\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String input <span class="token operator">=</span> inputElement<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"inputOver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                inputOver <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                elementlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
                elementIndex<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>inputOver <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//用do-while语句加上if判断来控制输入N行夹杂数字大小写的字符串</span>
        elementIndex <span class="token operator">=</span> elementIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>elementIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span>elementIndex<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> "</span> <span class="token operator">+</span> elementlist<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index <span class="token operator">&lt;</span>elementIndex<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span>
            newArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> elementlist<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>elementIndex<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String element <span class="token operator">:</span> newArray<span class="token punctuation">)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>element <span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> listIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>listIndex <span class="token operator">&lt;</span>newArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>listIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">sortArrays</span><span class="token punctuation">(</span>listIndex<span class="token punctuation">,</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sortArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> newArray<span class="token punctuation">)</span><span class="token punctuation">{</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> sortArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>newArray<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>newArray<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sortArray<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> newArray<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span>String<span class="token punctuation">.</span>CASE_INSENSITIVE_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String finalString <span class="token operator">=</span> <span class="token string">">>"</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>sortArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            finalString <span class="token operator">=</span> finalString<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>sortArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 学习笔记03 按钮Full Height全高度实现]]></title>
      <url>http://tecknight.xyz/2016/11/01/CSS%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%20%E6%8C%89%E9%92%AEFull%20Height%E5%85%A8%E9%AB%98%E5%BA%A6%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<pre class=" language-css"><code class="language-css"><span class="token selector">nav a<span class="token class">.button.alert</span></span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#e83a37</span><span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.1</span>rem<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>
    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>
    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="line-height-保证居中"><a href="#line-height-保证居中" class="headerlink" title="line-height 保证居中"></a>line-height 保证居中</h4><h4 id="接着将padding-top和buttom设置为0即可"><a href="#接着将padding-top和buttom设置为0即可" class="headerlink" title="接着将padding-top和buttom设置为0即可"></a>接着将padding-top和buttom设置为0即可</h4>]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS学习笔记05 图片放大特效]]></title>
      <url>http://tecknight.xyz/2016/11/01/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005%20%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E7%89%B9%E6%95%88/</url>
      <content type="html"><![CDATA[<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.img-zoom-in</span> img </span><span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span>all <span class="token number">.2</span>s ease-in-out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    <span class="token selector">//记得加上浏览器前缀或者自动补全prefix

<span class="token class">.img-zoom-in</span><span class="token pseudo-class">:hover</span> img </span><span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.post-thumb</span> </span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    //防止图片爆出外层div
</code></pre>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS学习笔记04 背景]]></title>
      <url>http://tecknight.xyz/2016/11/01/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004%20%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<h4 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h4><pre class=" language-css"><code class="language-css"><span class="token selector">nav </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.menu</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="设置透明"><a href="#设置透明" class="headerlink" title="设置透明"></a>设置透明</h5><h5 id="这样就使得菜单的颜色与导航栏的颜色一致"><a href="#这样就使得菜单的颜色与导航栏的颜色一致" class="headerlink" title="这样就使得菜单的颜色与导航栏的颜色一致"></a>这样就使得菜单的颜色与导航栏的颜色一致</h5><h4 id="背景加亮凸显文字"><a href="#背景加亮凸显文字" class="headerlink" title="背景加亮凸显文字"></a>背景加亮凸显文字</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.menu</span> > li > a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>, <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="0-1代表透明度为百分之十"><a href="#0-1代表透明度为百分之十" class="headerlink" title="0.1代表透明度为百分之十"></a>0.1代表透明度为百分之十</h5>]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS学习笔记02 nav上下居中]]></title>
      <url>http://tecknight.xyz/2016/11/01/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2002%20nav%E4%B8%8A%E4%B8%8B%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<h1 id="CSS学习笔记-02-nav上下居中"><a href="#CSS学习笔记-02-nav上下居中" class="headerlink" title="CSS学习笔记 02 nav上下居中"></a>CSS学习笔记 02 nav上下居中</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.nav-desktop</span></span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#e83a37</span><span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>
    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>
    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.menu-text</span> </span><span class="token punctuation">{</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>只需要调整line-height与nav导航栏的高度一致，将padding设置为0，就能够轻松实现上下居中</p>
<p>法二：<br>直接修改padding-top，用devTool动态改变数值看结果</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 学习笔记01 wrapper class实现居中]]></title>
      <url>http://tecknight.xyz/2016/11/01/CSS%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2001%20wrapper%20class/</url>
      <content type="html"><![CDATA[<h2 id="div内容居中"><a href="#div内容居中" class="headerlink" title="div内容居中"></a>div内容居中</h2><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- DESKTOP NAVIGATION  --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top-bar-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>site title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top-bar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrap</span></span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90%</span><span class="token punctuation">;</span> 
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>1.用百分号的好处就是能够实时计算</p>
<p>2.margin用于自动保持边距使得内容居中</p>
<p>3.max-width规定了居中内容的宽度（极有用）</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
